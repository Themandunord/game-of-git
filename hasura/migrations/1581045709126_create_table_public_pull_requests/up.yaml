- args:
    sql: CREATE EXTENSION IF NOT EXISTS pgcrypto;
  type: run_sql
- args:
    sql: "CREATE TABLE \"public\".\"pull_requests\"(\"id\" uuid NOT NULL DEFAULT gen_random_uuid(),
      \"created_at\" timestamptz NOT NULL DEFAULT now(), \"updated_at\" timestamptz
      NOT NULL DEFAULT now(), \"updated_at_external\" timetz NOT NULL, \"published_at\"
      timetz, \"closed_at\" timetz, \"merged_at\" timetz, \"merged_by\" uuid, \"number\"
      integer NOT NULL, \"closed\" boolean NOT NULL, \"is_cross_repository\" boolean
      NOT NULL, \"locked\" boolean NOT NULL, \"merged\" boolean NOT NULL, \"additions\"
      integer NOT NULL, \"changed_files\" integer NOT NULL, \"deletions\" integer
      NOT NULL, \"body_text\" text NOT NULL, PRIMARY KEY (\"id\") , FOREIGN KEY (\"merged_by\")
      REFERENCES \"public\".\"github_user\"(\"id\") ON UPDATE cascade ON DELETE cascade);\nCREATE
      OR REPLACE FUNCTION \"public\".\"set_current_timestamp_updated_at\"()\nRETURNS
      TRIGGER AS $$\nDECLARE\n  _new record;\nBEGIN\n  _new := NEW;\n  _new.\"updated_at\"
      = NOW();\n  RETURN _new;\nEND;\n$$ LANGUAGE plpgsql;\nCREATE TRIGGER \"set_public_pull_requests_updated_at\"\nBEFORE
      UPDATE ON \"public\".\"pull_requests\"\nFOR EACH ROW\nEXECUTE PROCEDURE \"public\".\"set_current_timestamp_updated_at\"();\nCOMMENT
      ON TRIGGER \"set_public_pull_requests_updated_at\" ON \"public\".\"pull_requests\"
      \nIS 'trigger to set value of column \"updated_at\" to current timestamp on
      row update';\n"
  type: run_sql
- args:
    name: pull_requests
    schema: public
  type: add_existing_table_or_view
