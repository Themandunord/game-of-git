enum Role {
  USER
  ADMIN
}

type User {
  id: ID! @unique @id
  email: String! @unique @index
  hash: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  name: String
  role: Role @default(value: USER)
  keys: [AppKey!]! @relation(name: "UserAppKeys" onDelete: "CASCADE")
  addedRepositories: [Repository!]! @relation(name: "UserAddedRepositories" onDelete: "SET_NULL")
  gitLogin: String!
  gamesOwned: [Game!]! @relation(name: "GameOwner")
}

type AppKey {
    id: ID! @unique @id
    user: User! @relation(name: "UserAppKeys")
    key: String! @unique
    name: String
    repositories: [Repository!]! @relation(name: "RepositoryAppKey")
}

type Repository {
  id: ID! @unique @id
  idExternal: String! @unique
  createdAtExternal: DateTime!
  updatedAtExternal: DateTime!
  addedBy: User! @relation(name: "UserAddedRepositories")
  
  name: String! @unique
  description: String! @default(value: "A neat repository")
  homepageUrl: String
  url: String!

  owner: String!
  isTracked: Boolean!
  appKey: AppKey! @relation(name: "RepositoryAppKey" onDelete: "CASCADE")

  isFork: Boolean!
  isLocked: Boolean!
  isPrivate: Boolean!
  isArchived: Boolean!
  isDisabled: Boolean!
  sshUrl: String

  stargazers: Int
  collaborators: Int
  watchers: Int
  issues: Int
  pullRequests: Int

  webhookEvents: [GitHubWebhookEvent!]! @relation(name: "WebhooksByRepository" onDelete: "CASCADE")
  game: Game @relation(name: "RepositoryGame" link:INLINE)
}

type GitHubWebhookEvent {
    id: ID! @id
    createdAt: DateTime! @createdAt

    repository: Repository! @relation(name: "WebhooksByRepository" onDelete: SET_NULL)
    eventType: String!
    action: String
    sender: String!
}

type Game {
	id: ID! @id
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt

	repository: Repository! @relation(name: "RepositoryGame" onDelete: SET_NULL)

	title: String!
  	owner: User! @relation(name: "GameOwner" onDelete: SET_NULL)
	type: String!
}