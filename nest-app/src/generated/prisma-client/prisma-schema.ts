// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `
    type AggregateAppKey {
        count: Int!
    }

    type AggregateGame {
        count: Int!
    }

    type AggregateGitHubBranch {
        count: Int!
    }

    type AggregateGitHubComment {
        count: Int!
    }

    type AggregateGitHubCommit {
        count: Int!
    }

    type AggregateGitHubFileDiff {
        count: Int!
    }

    type AggregateGitHubIssue {
        count: Int!
    }

    type AggregateGitHubLabel {
        count: Int!
    }

    type AggregateGitHubPullRequest {
        count: Int!
    }

    type AggregateGitHubPullRequestReview {
        count: Int!
    }

    type AggregateGitHubRepository {
        count: Int!
    }

    type AggregateGitHubReviewRequest {
        count: Int!
    }

    type AggregateGitHubReviewThread {
        count: Int!
    }

    type AggregateGitHubTopic {
        count: Int!
    }

    type AggregateGitHubUser {
        count: Int!
    }

    type AggregateGitHubWebhookEvent {
        count: Int!
    }

    type AggregatePost {
        count: Int!
    }

    type AggregateRepository {
        count: Int!
    }

    type AggregateUser {
        count: Int!
    }

    type AppKey {
        id: ID!
        user: User!
        repositories(
            where: RepositoryWhereInput
            orderBy: RepositoryOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [Repository!]
        key: String!
        name: String
    }

    type AppKeyConnection {
        pageInfo: PageInfo!
        edges: [AppKeyEdge]!
        aggregate: AggregateAppKey!
    }

    input AppKeyCreateInput {
        id: ID
        user: UserCreateOneWithoutKeysInput!
        repositories: RepositoryCreateManyWithoutAppKeyInput
        key: String!
        name: String
    }

    input AppKeyCreateManyWithoutUserInput {
        create: [AppKeyCreateWithoutUserInput!]
        connect: [AppKeyWhereUniqueInput!]
    }

    input AppKeyCreateOneWithoutRepositoriesInput {
        create: AppKeyCreateWithoutRepositoriesInput
        connect: AppKeyWhereUniqueInput
    }

    input AppKeyCreateWithoutRepositoriesInput {
        id: ID
        user: UserCreateOneWithoutKeysInput!
        key: String!
        name: String
    }

    input AppKeyCreateWithoutUserInput {
        id: ID
        repositories: RepositoryCreateManyWithoutAppKeyInput
        key: String!
        name: String
    }

    type AppKeyEdge {
        node: AppKey!
        cursor: String!
    }

    enum AppKeyOrderByInput {
        id_ASC
        id_DESC
        key_ASC
        key_DESC
        name_ASC
        name_DESC
    }

    type AppKeyPreviousValues {
        id: ID!
        key: String!
        name: String
    }

    input AppKeyScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        key: String
        key_not: String
        key_in: [String!]
        key_not_in: [String!]
        key_lt: String
        key_lte: String
        key_gt: String
        key_gte: String
        key_contains: String
        key_not_contains: String
        key_starts_with: String
        key_not_starts_with: String
        key_ends_with: String
        key_not_ends_with: String
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        AND: [AppKeyScalarWhereInput!]
        OR: [AppKeyScalarWhereInput!]
        NOT: [AppKeyScalarWhereInput!]
    }

    type AppKeySubscriptionPayload {
        mutation: MutationType!
        node: AppKey
        updatedFields: [String!]
        previousValues: AppKeyPreviousValues
    }

    input AppKeySubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: AppKeyWhereInput
        AND: [AppKeySubscriptionWhereInput!]
    }

    input AppKeyUpdateInput {
        user: UserUpdateOneRequiredWithoutKeysInput
        repositories: RepositoryUpdateManyWithoutAppKeyInput
        key: String
        name: String
    }

    input AppKeyUpdateManyDataInput {
        key: String
        name: String
    }

    input AppKeyUpdateManyMutationInput {
        key: String
        name: String
    }

    input AppKeyUpdateManyWithoutUserInput {
        create: [AppKeyCreateWithoutUserInput!]
        delete: [AppKeyWhereUniqueInput!]
        connect: [AppKeyWhereUniqueInput!]
        set: [AppKeyWhereUniqueInput!]
        disconnect: [AppKeyWhereUniqueInput!]
        update: [AppKeyUpdateWithWhereUniqueWithoutUserInput!]
        upsert: [AppKeyUpsertWithWhereUniqueWithoutUserInput!]
        deleteMany: [AppKeyScalarWhereInput!]
        updateMany: [AppKeyUpdateManyWithWhereNestedInput!]
    }

    input AppKeyUpdateManyWithWhereNestedInput {
        where: AppKeyScalarWhereInput!
        data: AppKeyUpdateManyDataInput!
    }

    input AppKeyUpdateOneRequiredWithoutRepositoriesInput {
        create: AppKeyCreateWithoutRepositoriesInput
        update: AppKeyUpdateWithoutRepositoriesDataInput
        upsert: AppKeyUpsertWithoutRepositoriesInput
        connect: AppKeyWhereUniqueInput
    }

    input AppKeyUpdateWithoutRepositoriesDataInput {
        user: UserUpdateOneRequiredWithoutKeysInput
        key: String
        name: String
    }

    input AppKeyUpdateWithoutUserDataInput {
        repositories: RepositoryUpdateManyWithoutAppKeyInput
        key: String
        name: String
    }

    input AppKeyUpdateWithWhereUniqueWithoutUserInput {
        where: AppKeyWhereUniqueInput!
        data: AppKeyUpdateWithoutUserDataInput!
    }

    input AppKeyUpsertWithoutRepositoriesInput {
        update: AppKeyUpdateWithoutRepositoriesDataInput!
        create: AppKeyCreateWithoutRepositoriesInput!
    }

    input AppKeyUpsertWithWhereUniqueWithoutUserInput {
        where: AppKeyWhereUniqueInput!
        update: AppKeyUpdateWithoutUserDataInput!
        create: AppKeyCreateWithoutUserInput!
    }

    input AppKeyWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        user: UserWhereInput
        repositories_some: RepositoryWhereInput
        key: String
        key_not: String
        key_in: [String!]
        key_not_in: [String!]
        key_lt: String
        key_lte: String
        key_gt: String
        key_gte: String
        key_contains: String
        key_not_contains: String
        key_starts_with: String
        key_not_starts_with: String
        key_ends_with: String
        key_not_ends_with: String
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        AND: [AppKeyWhereInput!]
    }

    input AppKeyWhereUniqueInput {
        id: ID
        key: String
    }

    type BatchPayload {
        count: Long!
    }

    scalar DateTime

    type Game {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        repository: Repository!
        title: String!
        owner: User!
        type: String!
    }

    type GameConnection {
        pageInfo: PageInfo!
        edges: [GameEdge]!
        aggregate: AggregateGame!
    }

    input GameCreateInput {
        id: ID
        repository: RepositoryCreateOneWithoutGameInput!
        title: String!
        owner: UserCreateOneInput!
        type: String!
    }

    input GameCreateOneWithoutRepositoryInput {
        create: GameCreateWithoutRepositoryInput
        connect: GameWhereUniqueInput
    }

    input GameCreateWithoutRepositoryInput {
        id: ID
        title: String!
        owner: UserCreateOneInput!
        type: String!
    }

    type GameEdge {
        node: Game!
        cursor: String!
    }

    enum GameOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        title_ASC
        title_DESC
        type_ASC
        type_DESC
    }

    type GamePreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        title: String!
        type: String!
    }

    type GameSubscriptionPayload {
        mutation: MutationType!
        node: Game
        updatedFields: [String!]
        previousValues: GamePreviousValues
    }

    input GameSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GameWhereInput
        AND: [GameSubscriptionWhereInput!]
    }

    input GameUpdateInput {
        repository: RepositoryUpdateOneRequiredWithoutGameInput
        title: String
        owner: UserUpdateOneRequiredInput
        type: String
    }

    input GameUpdateManyMutationInput {
        title: String
        type: String
    }

    input GameUpdateOneWithoutRepositoryInput {
        create: GameCreateWithoutRepositoryInput
        update: GameUpdateWithoutRepositoryDataInput
        upsert: GameUpsertWithoutRepositoryInput
        delete: Boolean
        disconnect: Boolean
        connect: GameWhereUniqueInput
    }

    input GameUpdateWithoutRepositoryDataInput {
        title: String
        owner: UserUpdateOneRequiredInput
        type: String
    }

    input GameUpsertWithoutRepositoryInput {
        update: GameUpdateWithoutRepositoryDataInput!
        create: GameCreateWithoutRepositoryInput!
    }

    input GameWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        repository: RepositoryWhereInput
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        owner: UserWhereInput
        type: String
        type_not: String
        type_in: [String!]
        type_not_in: [String!]
        type_lt: String
        type_lte: String
        type_gt: String
        type_gte: String
        type_contains: String
        type_not_contains: String
        type_starts_with: String
        type_not_starts_with: String
        type_ends_with: String
        type_not_ends_with: String
        AND: [GameWhereInput!]
    }

    input GameWhereUniqueInput {
        id: ID
    }

    type GitHubBranch {
        id: ID!
        name: String!
        commits(
            where: GitHubCommitWhereInput
            orderBy: GitHubCommitOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubCommit!]
        pullRequest: GitHubPullRequest
        merged: Boolean
        createdAt: DateTime!
        updatedAt: DateTime!
    }

    type GitHubBranchConnection {
        pageInfo: PageInfo!
        edges: [GitHubBranchEdge]!
        aggregate: AggregateGitHubBranch!
    }

    input GitHubBranchCreateInput {
        id: ID
        name: String!
        commits: GitHubCommitCreateManyInput
        pullRequest: GitHubPullRequestCreateOneInput
        merged: Boolean
    }

    type GitHubBranchEdge {
        node: GitHubBranch!
        cursor: String!
    }

    enum GitHubBranchOrderByInput {
        id_ASC
        id_DESC
        name_ASC
        name_DESC
        merged_ASC
        merged_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
    }

    type GitHubBranchPreviousValues {
        id: ID!
        name: String!
        merged: Boolean
        createdAt: DateTime!
        updatedAt: DateTime!
    }

    type GitHubBranchSubscriptionPayload {
        mutation: MutationType!
        node: GitHubBranch
        updatedFields: [String!]
        previousValues: GitHubBranchPreviousValues
    }

    input GitHubBranchSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubBranchWhereInput
        AND: [GitHubBranchSubscriptionWhereInput!]
    }

    input GitHubBranchUpdateInput {
        name: String
        commits: GitHubCommitUpdateManyInput
        pullRequest: GitHubPullRequestUpdateOneInput
        merged: Boolean
    }

    input GitHubBranchUpdateManyMutationInput {
        name: String
        merged: Boolean
    }

    input GitHubBranchWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        commits_some: GitHubCommitWhereInput
        pullRequest: GitHubPullRequestWhereInput
        merged: Boolean
        merged_not: Boolean
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [GitHubBranchWhereInput!]
    }

    input GitHubBranchWhereUniqueInput {
        id: ID
    }

    type GitHubComment {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        createdAtExternal: DateTime!
        author: GitHubUser!
        bodyText: String!
        url: String!
    }

    type GitHubCommentConnection {
        pageInfo: PageInfo!
        edges: [GitHubCommentEdge]!
        aggregate: AggregateGitHubComment!
    }

    input GitHubCommentCreateInput {
        id: ID
        createdAtExternal: DateTime!
        author: GitHubUserCreateOneWithoutIssueCommentsInput!
        bodyText: String!
        url: String!
    }

    input GitHubCommentCreateManyInput {
        create: [GitHubCommentCreateInput!]
        connect: [GitHubCommentWhereUniqueInput!]
    }

    input GitHubCommentCreateManyWithoutAuthorInput {
        create: [GitHubCommentCreateWithoutAuthorInput!]
        connect: [GitHubCommentWhereUniqueInput!]
    }

    input GitHubCommentCreateWithoutAuthorInput {
        id: ID
        createdAtExternal: DateTime!
        bodyText: String!
        url: String!
    }

    type GitHubCommentEdge {
        node: GitHubComment!
        cursor: String!
    }

    enum GitHubCommentOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        createdAtExternal_ASC
        createdAtExternal_DESC
        bodyText_ASC
        bodyText_DESC
        url_ASC
        url_DESC
    }

    type GitHubCommentPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        createdAtExternal: DateTime!
        bodyText: String!
        url: String!
    }

    input GitHubCommentScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        bodyText: String
        bodyText_not: String
        bodyText_in: [String!]
        bodyText_not_in: [String!]
        bodyText_lt: String
        bodyText_lte: String
        bodyText_gt: String
        bodyText_gte: String
        bodyText_contains: String
        bodyText_not_contains: String
        bodyText_starts_with: String
        bodyText_not_starts_with: String
        bodyText_ends_with: String
        bodyText_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubCommentScalarWhereInput!]
        OR: [GitHubCommentScalarWhereInput!]
        NOT: [GitHubCommentScalarWhereInput!]
    }

    type GitHubCommentSubscriptionPayload {
        mutation: MutationType!
        node: GitHubComment
        updatedFields: [String!]
        previousValues: GitHubCommentPreviousValues
    }

    input GitHubCommentSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubCommentWhereInput
        AND: [GitHubCommentSubscriptionWhereInput!]
    }

    input GitHubCommentUpdateDataInput {
        createdAtExternal: DateTime
        author: GitHubUserUpdateOneRequiredWithoutIssueCommentsInput
        bodyText: String
        url: String
    }

    input GitHubCommentUpdateInput {
        createdAtExternal: DateTime
        author: GitHubUserUpdateOneRequiredWithoutIssueCommentsInput
        bodyText: String
        url: String
    }

    input GitHubCommentUpdateManyDataInput {
        createdAtExternal: DateTime
        bodyText: String
        url: String
    }

    input GitHubCommentUpdateManyInput {
        create: [GitHubCommentCreateInput!]
        update: [GitHubCommentUpdateWithWhereUniqueNestedInput!]
        upsert: [GitHubCommentUpsertWithWhereUniqueNestedInput!]
        delete: [GitHubCommentWhereUniqueInput!]
        connect: [GitHubCommentWhereUniqueInput!]
        set: [GitHubCommentWhereUniqueInput!]
        disconnect: [GitHubCommentWhereUniqueInput!]
        deleteMany: [GitHubCommentScalarWhereInput!]
        updateMany: [GitHubCommentUpdateManyWithWhereNestedInput!]
    }

    input GitHubCommentUpdateManyMutationInput {
        createdAtExternal: DateTime
        bodyText: String
        url: String
    }

    input GitHubCommentUpdateManyWithoutAuthorInput {
        create: [GitHubCommentCreateWithoutAuthorInput!]
        delete: [GitHubCommentWhereUniqueInput!]
        connect: [GitHubCommentWhereUniqueInput!]
        set: [GitHubCommentWhereUniqueInput!]
        disconnect: [GitHubCommentWhereUniqueInput!]
        update: [GitHubCommentUpdateWithWhereUniqueWithoutAuthorInput!]
        upsert: [GitHubCommentUpsertWithWhereUniqueWithoutAuthorInput!]
        deleteMany: [GitHubCommentScalarWhereInput!]
        updateMany: [GitHubCommentUpdateManyWithWhereNestedInput!]
    }

    input GitHubCommentUpdateManyWithWhereNestedInput {
        where: GitHubCommentScalarWhereInput!
        data: GitHubCommentUpdateManyDataInput!
    }

    input GitHubCommentUpdateWithoutAuthorDataInput {
        createdAtExternal: DateTime
        bodyText: String
        url: String
    }

    input GitHubCommentUpdateWithWhereUniqueNestedInput {
        where: GitHubCommentWhereUniqueInput!
        data: GitHubCommentUpdateDataInput!
    }

    input GitHubCommentUpdateWithWhereUniqueWithoutAuthorInput {
        where: GitHubCommentWhereUniqueInput!
        data: GitHubCommentUpdateWithoutAuthorDataInput!
    }

    input GitHubCommentUpsertWithWhereUniqueNestedInput {
        where: GitHubCommentWhereUniqueInput!
        update: GitHubCommentUpdateDataInput!
        create: GitHubCommentCreateInput!
    }

    input GitHubCommentUpsertWithWhereUniqueWithoutAuthorInput {
        where: GitHubCommentWhereUniqueInput!
        update: GitHubCommentUpdateWithoutAuthorDataInput!
        create: GitHubCommentCreateWithoutAuthorInput!
    }

    input GitHubCommentWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        author: GitHubUserWhereInput
        bodyText: String
        bodyText_not: String
        bodyText_in: [String!]
        bodyText_not_in: [String!]
        bodyText_lt: String
        bodyText_lte: String
        bodyText_gt: String
        bodyText_gte: String
        bodyText_contains: String
        bodyText_not_contains: String
        bodyText_starts_with: String
        bodyText_not_starts_with: String
        bodyText_ends_with: String
        bodyText_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubCommentWhereInput!]
    }

    input GitHubCommentWhereUniqueInput {
        id: ID
    }

    type GitHubCommit {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        author: GitHubUser!
        associatedPullRequests(
            where: GitHubPullRequestWhereInput
            orderBy: GitHubPullRequestOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubPullRequest!]
        committer: GitHubUser!
        additions: Int!
        authedDate: DateTime!
        changedFiles: Int!
        commitUrl: String!
        deletions: Int!
        message: String!
        messageHeadline: String!
        pushedDate: DateTime!
        treeUrl: String!
        url: String!
    }

    type GitHubCommitConnection {
        pageInfo: PageInfo!
        edges: [GitHubCommitEdge]!
        aggregate: AggregateGitHubCommit!
    }

    input GitHubCommitCreateInput {
        id: ID
        author: GitHubUserCreateOneInput!
        associatedPullRequests: GitHubPullRequestCreateManyWithoutCommitsInput
        committer: GitHubUserCreateOneInput!
        additions: Int!
        authedDate: DateTime!
        changedFiles: Int!
        commitUrl: String!
        deletions: Int!
        message: String!
        messageHeadline: String!
        pushedDate: DateTime!
        treeUrl: String!
        url: String!
    }

    input GitHubCommitCreateManyInput {
        create: [GitHubCommitCreateInput!]
        connect: [GitHubCommitWhereUniqueInput!]
    }

    input GitHubCommitCreateManyWithoutAssociatedPullRequestsInput {
        create: [GitHubCommitCreateWithoutAssociatedPullRequestsInput!]
        connect: [GitHubCommitWhereUniqueInput!]
    }

    input GitHubCommitCreateWithoutAssociatedPullRequestsInput {
        id: ID
        author: GitHubUserCreateOneInput!
        committer: GitHubUserCreateOneInput!
        additions: Int!
        authedDate: DateTime!
        changedFiles: Int!
        commitUrl: String!
        deletions: Int!
        message: String!
        messageHeadline: String!
        pushedDate: DateTime!
        treeUrl: String!
        url: String!
    }

    type GitHubCommitEdge {
        node: GitHubCommit!
        cursor: String!
    }

    enum GitHubCommitOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        additions_ASC
        additions_DESC
        authedDate_ASC
        authedDate_DESC
        changedFiles_ASC
        changedFiles_DESC
        commitUrl_ASC
        commitUrl_DESC
        deletions_ASC
        deletions_DESC
        message_ASC
        message_DESC
        messageHeadline_ASC
        messageHeadline_DESC
        pushedDate_ASC
        pushedDate_DESC
        treeUrl_ASC
        treeUrl_DESC
        url_ASC
        url_DESC
    }

    type GitHubCommitPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        additions: Int!
        authedDate: DateTime!
        changedFiles: Int!
        commitUrl: String!
        deletions: Int!
        message: String!
        messageHeadline: String!
        pushedDate: DateTime!
        treeUrl: String!
        url: String!
    }

    input GitHubCommitScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        additions: Int
        additions_not: Int
        additions_in: [Int!]
        additions_not_in: [Int!]
        additions_lt: Int
        additions_lte: Int
        additions_gt: Int
        additions_gte: Int
        authedDate: DateTime
        authedDate_not: DateTime
        authedDate_in: [DateTime!]
        authedDate_not_in: [DateTime!]
        authedDate_lt: DateTime
        authedDate_lte: DateTime
        authedDate_gt: DateTime
        authedDate_gte: DateTime
        changedFiles: Int
        changedFiles_not: Int
        changedFiles_in: [Int!]
        changedFiles_not_in: [Int!]
        changedFiles_lt: Int
        changedFiles_lte: Int
        changedFiles_gt: Int
        changedFiles_gte: Int
        commitUrl: String
        commitUrl_not: String
        commitUrl_in: [String!]
        commitUrl_not_in: [String!]
        commitUrl_lt: String
        commitUrl_lte: String
        commitUrl_gt: String
        commitUrl_gte: String
        commitUrl_contains: String
        commitUrl_not_contains: String
        commitUrl_starts_with: String
        commitUrl_not_starts_with: String
        commitUrl_ends_with: String
        commitUrl_not_ends_with: String
        deletions: Int
        deletions_not: Int
        deletions_in: [Int!]
        deletions_not_in: [Int!]
        deletions_lt: Int
        deletions_lte: Int
        deletions_gt: Int
        deletions_gte: Int
        message: String
        message_not: String
        message_in: [String!]
        message_not_in: [String!]
        message_lt: String
        message_lte: String
        message_gt: String
        message_gte: String
        message_contains: String
        message_not_contains: String
        message_starts_with: String
        message_not_starts_with: String
        message_ends_with: String
        message_not_ends_with: String
        messageHeadline: String
        messageHeadline_not: String
        messageHeadline_in: [String!]
        messageHeadline_not_in: [String!]
        messageHeadline_lt: String
        messageHeadline_lte: String
        messageHeadline_gt: String
        messageHeadline_gte: String
        messageHeadline_contains: String
        messageHeadline_not_contains: String
        messageHeadline_starts_with: String
        messageHeadline_not_starts_with: String
        messageHeadline_ends_with: String
        messageHeadline_not_ends_with: String
        pushedDate: DateTime
        pushedDate_not: DateTime
        pushedDate_in: [DateTime!]
        pushedDate_not_in: [DateTime!]
        pushedDate_lt: DateTime
        pushedDate_lte: DateTime
        pushedDate_gt: DateTime
        pushedDate_gte: DateTime
        treeUrl: String
        treeUrl_not: String
        treeUrl_in: [String!]
        treeUrl_not_in: [String!]
        treeUrl_lt: String
        treeUrl_lte: String
        treeUrl_gt: String
        treeUrl_gte: String
        treeUrl_contains: String
        treeUrl_not_contains: String
        treeUrl_starts_with: String
        treeUrl_not_starts_with: String
        treeUrl_ends_with: String
        treeUrl_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubCommitScalarWhereInput!]
        OR: [GitHubCommitScalarWhereInput!]
        NOT: [GitHubCommitScalarWhereInput!]
    }

    type GitHubCommitSubscriptionPayload {
        mutation: MutationType!
        node: GitHubCommit
        updatedFields: [String!]
        previousValues: GitHubCommitPreviousValues
    }

    input GitHubCommitSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubCommitWhereInput
        AND: [GitHubCommitSubscriptionWhereInput!]
    }

    input GitHubCommitUpdateDataInput {
        author: GitHubUserUpdateOneRequiredInput
        associatedPullRequests: GitHubPullRequestUpdateManyWithoutCommitsInput
        committer: GitHubUserUpdateOneRequiredInput
        additions: Int
        authedDate: DateTime
        changedFiles: Int
        commitUrl: String
        deletions: Int
        message: String
        messageHeadline: String
        pushedDate: DateTime
        treeUrl: String
        url: String
    }

    input GitHubCommitUpdateInput {
        author: GitHubUserUpdateOneRequiredInput
        associatedPullRequests: GitHubPullRequestUpdateManyWithoutCommitsInput
        committer: GitHubUserUpdateOneRequiredInput
        additions: Int
        authedDate: DateTime
        changedFiles: Int
        commitUrl: String
        deletions: Int
        message: String
        messageHeadline: String
        pushedDate: DateTime
        treeUrl: String
        url: String
    }

    input GitHubCommitUpdateManyDataInput {
        additions: Int
        authedDate: DateTime
        changedFiles: Int
        commitUrl: String
        deletions: Int
        message: String
        messageHeadline: String
        pushedDate: DateTime
        treeUrl: String
        url: String
    }

    input GitHubCommitUpdateManyInput {
        create: [GitHubCommitCreateInput!]
        update: [GitHubCommitUpdateWithWhereUniqueNestedInput!]
        upsert: [GitHubCommitUpsertWithWhereUniqueNestedInput!]
        delete: [GitHubCommitWhereUniqueInput!]
        connect: [GitHubCommitWhereUniqueInput!]
        set: [GitHubCommitWhereUniqueInput!]
        disconnect: [GitHubCommitWhereUniqueInput!]
        deleteMany: [GitHubCommitScalarWhereInput!]
        updateMany: [GitHubCommitUpdateManyWithWhereNestedInput!]
    }

    input GitHubCommitUpdateManyMutationInput {
        additions: Int
        authedDate: DateTime
        changedFiles: Int
        commitUrl: String
        deletions: Int
        message: String
        messageHeadline: String
        pushedDate: DateTime
        treeUrl: String
        url: String
    }

    input GitHubCommitUpdateManyWithoutAssociatedPullRequestsInput {
        create: [GitHubCommitCreateWithoutAssociatedPullRequestsInput!]
        delete: [GitHubCommitWhereUniqueInput!]
        connect: [GitHubCommitWhereUniqueInput!]
        set: [GitHubCommitWhereUniqueInput!]
        disconnect: [GitHubCommitWhereUniqueInput!]
        update: [GitHubCommitUpdateWithWhereUniqueWithoutAssociatedPullRequestsInput!]
        upsert: [GitHubCommitUpsertWithWhereUniqueWithoutAssociatedPullRequestsInput!]
        deleteMany: [GitHubCommitScalarWhereInput!]
        updateMany: [GitHubCommitUpdateManyWithWhereNestedInput!]
    }

    input GitHubCommitUpdateManyWithWhereNestedInput {
        where: GitHubCommitScalarWhereInput!
        data: GitHubCommitUpdateManyDataInput!
    }

    input GitHubCommitUpdateWithoutAssociatedPullRequestsDataInput {
        author: GitHubUserUpdateOneRequiredInput
        committer: GitHubUserUpdateOneRequiredInput
        additions: Int
        authedDate: DateTime
        changedFiles: Int
        commitUrl: String
        deletions: Int
        message: String
        messageHeadline: String
        pushedDate: DateTime
        treeUrl: String
        url: String
    }

    input GitHubCommitUpdateWithWhereUniqueNestedInput {
        where: GitHubCommitWhereUniqueInput!
        data: GitHubCommitUpdateDataInput!
    }

    input GitHubCommitUpdateWithWhereUniqueWithoutAssociatedPullRequestsInput {
        where: GitHubCommitWhereUniqueInput!
        data: GitHubCommitUpdateWithoutAssociatedPullRequestsDataInput!
    }

    input GitHubCommitUpsertWithWhereUniqueNestedInput {
        where: GitHubCommitWhereUniqueInput!
        update: GitHubCommitUpdateDataInput!
        create: GitHubCommitCreateInput!
    }

    input GitHubCommitUpsertWithWhereUniqueWithoutAssociatedPullRequestsInput {
        where: GitHubCommitWhereUniqueInput!
        update: GitHubCommitUpdateWithoutAssociatedPullRequestsDataInput!
        create: GitHubCommitCreateWithoutAssociatedPullRequestsInput!
    }

    input GitHubCommitWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        author: GitHubUserWhereInput
        associatedPullRequests_some: GitHubPullRequestWhereInput
        committer: GitHubUserWhereInput
        additions: Int
        additions_not: Int
        additions_in: [Int!]
        additions_not_in: [Int!]
        additions_lt: Int
        additions_lte: Int
        additions_gt: Int
        additions_gte: Int
        authedDate: DateTime
        authedDate_not: DateTime
        authedDate_in: [DateTime!]
        authedDate_not_in: [DateTime!]
        authedDate_lt: DateTime
        authedDate_lte: DateTime
        authedDate_gt: DateTime
        authedDate_gte: DateTime
        changedFiles: Int
        changedFiles_not: Int
        changedFiles_in: [Int!]
        changedFiles_not_in: [Int!]
        changedFiles_lt: Int
        changedFiles_lte: Int
        changedFiles_gt: Int
        changedFiles_gte: Int
        commitUrl: String
        commitUrl_not: String
        commitUrl_in: [String!]
        commitUrl_not_in: [String!]
        commitUrl_lt: String
        commitUrl_lte: String
        commitUrl_gt: String
        commitUrl_gte: String
        commitUrl_contains: String
        commitUrl_not_contains: String
        commitUrl_starts_with: String
        commitUrl_not_starts_with: String
        commitUrl_ends_with: String
        commitUrl_not_ends_with: String
        deletions: Int
        deletions_not: Int
        deletions_in: [Int!]
        deletions_not_in: [Int!]
        deletions_lt: Int
        deletions_lte: Int
        deletions_gt: Int
        deletions_gte: Int
        message: String
        message_not: String
        message_in: [String!]
        message_not_in: [String!]
        message_lt: String
        message_lte: String
        message_gt: String
        message_gte: String
        message_contains: String
        message_not_contains: String
        message_starts_with: String
        message_not_starts_with: String
        message_ends_with: String
        message_not_ends_with: String
        messageHeadline: String
        messageHeadline_not: String
        messageHeadline_in: [String!]
        messageHeadline_not_in: [String!]
        messageHeadline_lt: String
        messageHeadline_lte: String
        messageHeadline_gt: String
        messageHeadline_gte: String
        messageHeadline_contains: String
        messageHeadline_not_contains: String
        messageHeadline_starts_with: String
        messageHeadline_not_starts_with: String
        messageHeadline_ends_with: String
        messageHeadline_not_ends_with: String
        pushedDate: DateTime
        pushedDate_not: DateTime
        pushedDate_in: [DateTime!]
        pushedDate_not_in: [DateTime!]
        pushedDate_lt: DateTime
        pushedDate_lte: DateTime
        pushedDate_gt: DateTime
        pushedDate_gte: DateTime
        treeUrl: String
        treeUrl_not: String
        treeUrl_in: [String!]
        treeUrl_not_in: [String!]
        treeUrl_lt: String
        treeUrl_lte: String
        treeUrl_gt: String
        treeUrl_gte: String
        treeUrl_contains: String
        treeUrl_not_contains: String
        treeUrl_starts_with: String
        treeUrl_not_starts_with: String
        treeUrl_ends_with: String
        treeUrl_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubCommitWhereInput!]
    }

    input GitHubCommitWhereUniqueInput {
        id: ID
    }

    type GitHubFileDiff {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        additions: Int!
        deletions: Int!
        filepath: String!
    }

    type GitHubFileDiffConnection {
        pageInfo: PageInfo!
        edges: [GitHubFileDiffEdge]!
        aggregate: AggregateGitHubFileDiff!
    }

    input GitHubFileDiffCreateInput {
        id: ID
        additions: Int!
        deletions: Int!
        filepath: String!
    }

    input GitHubFileDiffCreateManyInput {
        create: [GitHubFileDiffCreateInput!]
        connect: [GitHubFileDiffWhereUniqueInput!]
    }

    type GitHubFileDiffEdge {
        node: GitHubFileDiff!
        cursor: String!
    }

    enum GitHubFileDiffOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        additions_ASC
        additions_DESC
        deletions_ASC
        deletions_DESC
        filepath_ASC
        filepath_DESC
    }

    type GitHubFileDiffPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        additions: Int!
        deletions: Int!
        filepath: String!
    }

    input GitHubFileDiffScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        additions: Int
        additions_not: Int
        additions_in: [Int!]
        additions_not_in: [Int!]
        additions_lt: Int
        additions_lte: Int
        additions_gt: Int
        additions_gte: Int
        deletions: Int
        deletions_not: Int
        deletions_in: [Int!]
        deletions_not_in: [Int!]
        deletions_lt: Int
        deletions_lte: Int
        deletions_gt: Int
        deletions_gte: Int
        filepath: String
        filepath_not: String
        filepath_in: [String!]
        filepath_not_in: [String!]
        filepath_lt: String
        filepath_lte: String
        filepath_gt: String
        filepath_gte: String
        filepath_contains: String
        filepath_not_contains: String
        filepath_starts_with: String
        filepath_not_starts_with: String
        filepath_ends_with: String
        filepath_not_ends_with: String
        AND: [GitHubFileDiffScalarWhereInput!]
        OR: [GitHubFileDiffScalarWhereInput!]
        NOT: [GitHubFileDiffScalarWhereInput!]
    }

    type GitHubFileDiffSubscriptionPayload {
        mutation: MutationType!
        node: GitHubFileDiff
        updatedFields: [String!]
        previousValues: GitHubFileDiffPreviousValues
    }

    input GitHubFileDiffSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubFileDiffWhereInput
        AND: [GitHubFileDiffSubscriptionWhereInput!]
    }

    input GitHubFileDiffUpdateDataInput {
        additions: Int
        deletions: Int
        filepath: String
    }

    input GitHubFileDiffUpdateInput {
        additions: Int
        deletions: Int
        filepath: String
    }

    input GitHubFileDiffUpdateManyDataInput {
        additions: Int
        deletions: Int
        filepath: String
    }

    input GitHubFileDiffUpdateManyInput {
        create: [GitHubFileDiffCreateInput!]
        update: [GitHubFileDiffUpdateWithWhereUniqueNestedInput!]
        upsert: [GitHubFileDiffUpsertWithWhereUniqueNestedInput!]
        delete: [GitHubFileDiffWhereUniqueInput!]
        connect: [GitHubFileDiffWhereUniqueInput!]
        set: [GitHubFileDiffWhereUniqueInput!]
        disconnect: [GitHubFileDiffWhereUniqueInput!]
        deleteMany: [GitHubFileDiffScalarWhereInput!]
        updateMany: [GitHubFileDiffUpdateManyWithWhereNestedInput!]
    }

    input GitHubFileDiffUpdateManyMutationInput {
        additions: Int
        deletions: Int
        filepath: String
    }

    input GitHubFileDiffUpdateManyWithWhereNestedInput {
        where: GitHubFileDiffScalarWhereInput!
        data: GitHubFileDiffUpdateManyDataInput!
    }

    input GitHubFileDiffUpdateWithWhereUniqueNestedInput {
        where: GitHubFileDiffWhereUniqueInput!
        data: GitHubFileDiffUpdateDataInput!
    }

    input GitHubFileDiffUpsertWithWhereUniqueNestedInput {
        where: GitHubFileDiffWhereUniqueInput!
        update: GitHubFileDiffUpdateDataInput!
        create: GitHubFileDiffCreateInput!
    }

    input GitHubFileDiffWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        additions: Int
        additions_not: Int
        additions_in: [Int!]
        additions_not_in: [Int!]
        additions_lt: Int
        additions_lte: Int
        additions_gt: Int
        additions_gte: Int
        deletions: Int
        deletions_not: Int
        deletions_in: [Int!]
        deletions_not_in: [Int!]
        deletions_lt: Int
        deletions_lte: Int
        deletions_gt: Int
        deletions_gte: Int
        filepath: String
        filepath_not: String
        filepath_in: [String!]
        filepath_not_in: [String!]
        filepath_lt: String
        filepath_lte: String
        filepath_gt: String
        filepath_gte: String
        filepath_contains: String
        filepath_not_contains: String
        filepath_starts_with: String
        filepath_not_starts_with: String
        filepath_ends_with: String
        filepath_not_ends_with: String
        AND: [GitHubFileDiffWhereInput!]
    }

    input GitHubFileDiffWhereUniqueInput {
        id: ID
    }

    type GitHubIssue {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        lastEditedAt: DateTime!
        assignees(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser!]
        author: GitHubUser!
        comments(
            where: GitHubCommentWhereInput
            orderBy: GitHubCommentOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubComment!]
        labels(
            where: GitHubLabelWhereInput
            orderBy: GitHubLabelOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubLabel!]
        participants(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser!]
        bodyText: String!
        closed: DateTime
        locked: Boolean!
        number: Int!
        state: String!
        title: String!
        url: String!
    }

    type GitHubIssueConnection {
        pageInfo: PageInfo!
        edges: [GitHubIssueEdge]!
        aggregate: AggregateGitHubIssue!
    }

    input GitHubIssueCreateInput {
        id: ID
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        lastEditedAt: DateTime!
        assignees: GitHubUserCreateManyInput
        author: GitHubUserCreateOneInput!
        comments: GitHubCommentCreateManyInput
        labels: GitHubLabelCreateManyWithoutIssuesInput
        participants: GitHubUserCreateManyInput
        bodyText: String!
        closed: DateTime
        locked: Boolean!
        number: Int!
        state: String!
        title: String!
        url: String!
    }

    input GitHubIssueCreateManyInput {
        create: [GitHubIssueCreateInput!]
        connect: [GitHubIssueWhereUniqueInput!]
    }

    input GitHubIssueCreateManyWithoutLabelsInput {
        create: [GitHubIssueCreateWithoutLabelsInput!]
        connect: [GitHubIssueWhereUniqueInput!]
    }

    input GitHubIssueCreateWithoutLabelsInput {
        id: ID
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        lastEditedAt: DateTime!
        assignees: GitHubUserCreateManyInput
        author: GitHubUserCreateOneInput!
        comments: GitHubCommentCreateManyInput
        participants: GitHubUserCreateManyInput
        bodyText: String!
        closed: DateTime
        locked: Boolean!
        number: Int!
        state: String!
        title: String!
        url: String!
    }

    type GitHubIssueEdge {
        node: GitHubIssue!
        cursor: String!
    }

    enum GitHubIssueOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        createdAtExternal_ASC
        createdAtExternal_DESC
        updatedAtExternal_ASC
        updatedAtExternal_DESC
        lastEditedAt_ASC
        lastEditedAt_DESC
        bodyText_ASC
        bodyText_DESC
        closed_ASC
        closed_DESC
        locked_ASC
        locked_DESC
        number_ASC
        number_DESC
        state_ASC
        state_DESC
        title_ASC
        title_DESC
        url_ASC
        url_DESC
    }

    type GitHubIssuePreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        lastEditedAt: DateTime!
        bodyText: String!
        closed: DateTime
        locked: Boolean!
        number: Int!
        state: String!
        title: String!
        url: String!
    }

    input GitHubIssueScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        updatedAtExternal: DateTime
        updatedAtExternal_not: DateTime
        updatedAtExternal_in: [DateTime!]
        updatedAtExternal_not_in: [DateTime!]
        updatedAtExternal_lt: DateTime
        updatedAtExternal_lte: DateTime
        updatedAtExternal_gt: DateTime
        updatedAtExternal_gte: DateTime
        lastEditedAt: DateTime
        lastEditedAt_not: DateTime
        lastEditedAt_in: [DateTime!]
        lastEditedAt_not_in: [DateTime!]
        lastEditedAt_lt: DateTime
        lastEditedAt_lte: DateTime
        lastEditedAt_gt: DateTime
        lastEditedAt_gte: DateTime
        bodyText: String
        bodyText_not: String
        bodyText_in: [String!]
        bodyText_not_in: [String!]
        bodyText_lt: String
        bodyText_lte: String
        bodyText_gt: String
        bodyText_gte: String
        bodyText_contains: String
        bodyText_not_contains: String
        bodyText_starts_with: String
        bodyText_not_starts_with: String
        bodyText_ends_with: String
        bodyText_not_ends_with: String
        closed: DateTime
        closed_not: DateTime
        closed_in: [DateTime!]
        closed_not_in: [DateTime!]
        closed_lt: DateTime
        closed_lte: DateTime
        closed_gt: DateTime
        closed_gte: DateTime
        locked: Boolean
        locked_not: Boolean
        number: Int
        number_not: Int
        number_in: [Int!]
        number_not_in: [Int!]
        number_lt: Int
        number_lte: Int
        number_gt: Int
        number_gte: Int
        state: String
        state_not: String
        state_in: [String!]
        state_not_in: [String!]
        state_lt: String
        state_lte: String
        state_gt: String
        state_gte: String
        state_contains: String
        state_not_contains: String
        state_starts_with: String
        state_not_starts_with: String
        state_ends_with: String
        state_not_ends_with: String
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubIssueScalarWhereInput!]
        OR: [GitHubIssueScalarWhereInput!]
        NOT: [GitHubIssueScalarWhereInput!]
    }

    type GitHubIssueSubscriptionPayload {
        mutation: MutationType!
        node: GitHubIssue
        updatedFields: [String!]
        previousValues: GitHubIssuePreviousValues
    }

    input GitHubIssueSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubIssueWhereInput
        AND: [GitHubIssueSubscriptionWhereInput!]
    }

    input GitHubIssueUpdateDataInput {
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        lastEditedAt: DateTime
        assignees: GitHubUserUpdateManyInput
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        labels: GitHubLabelUpdateManyWithoutIssuesInput
        participants: GitHubUserUpdateManyInput
        bodyText: String
        closed: DateTime
        locked: Boolean
        number: Int
        state: String
        title: String
        url: String
    }

    input GitHubIssueUpdateInput {
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        lastEditedAt: DateTime
        assignees: GitHubUserUpdateManyInput
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        labels: GitHubLabelUpdateManyWithoutIssuesInput
        participants: GitHubUserUpdateManyInput
        bodyText: String
        closed: DateTime
        locked: Boolean
        number: Int
        state: String
        title: String
        url: String
    }

    input GitHubIssueUpdateManyDataInput {
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        lastEditedAt: DateTime
        bodyText: String
        closed: DateTime
        locked: Boolean
        number: Int
        state: String
        title: String
        url: String
    }

    input GitHubIssueUpdateManyInput {
        create: [GitHubIssueCreateInput!]
        update: [GitHubIssueUpdateWithWhereUniqueNestedInput!]
        upsert: [GitHubIssueUpsertWithWhereUniqueNestedInput!]
        delete: [GitHubIssueWhereUniqueInput!]
        connect: [GitHubIssueWhereUniqueInput!]
        set: [GitHubIssueWhereUniqueInput!]
        disconnect: [GitHubIssueWhereUniqueInput!]
        deleteMany: [GitHubIssueScalarWhereInput!]
        updateMany: [GitHubIssueUpdateManyWithWhereNestedInput!]
    }

    input GitHubIssueUpdateManyMutationInput {
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        lastEditedAt: DateTime
        bodyText: String
        closed: DateTime
        locked: Boolean
        number: Int
        state: String
        title: String
        url: String
    }

    input GitHubIssueUpdateManyWithoutLabelsInput {
        create: [GitHubIssueCreateWithoutLabelsInput!]
        delete: [GitHubIssueWhereUniqueInput!]
        connect: [GitHubIssueWhereUniqueInput!]
        set: [GitHubIssueWhereUniqueInput!]
        disconnect: [GitHubIssueWhereUniqueInput!]
        update: [GitHubIssueUpdateWithWhereUniqueWithoutLabelsInput!]
        upsert: [GitHubIssueUpsertWithWhereUniqueWithoutLabelsInput!]
        deleteMany: [GitHubIssueScalarWhereInput!]
        updateMany: [GitHubIssueUpdateManyWithWhereNestedInput!]
    }

    input GitHubIssueUpdateManyWithWhereNestedInput {
        where: GitHubIssueScalarWhereInput!
        data: GitHubIssueUpdateManyDataInput!
    }

    input GitHubIssueUpdateWithoutLabelsDataInput {
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        lastEditedAt: DateTime
        assignees: GitHubUserUpdateManyInput
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        participants: GitHubUserUpdateManyInput
        bodyText: String
        closed: DateTime
        locked: Boolean
        number: Int
        state: String
        title: String
        url: String
    }

    input GitHubIssueUpdateWithWhereUniqueNestedInput {
        where: GitHubIssueWhereUniqueInput!
        data: GitHubIssueUpdateDataInput!
    }

    input GitHubIssueUpdateWithWhereUniqueWithoutLabelsInput {
        where: GitHubIssueWhereUniqueInput!
        data: GitHubIssueUpdateWithoutLabelsDataInput!
    }

    input GitHubIssueUpsertWithWhereUniqueNestedInput {
        where: GitHubIssueWhereUniqueInput!
        update: GitHubIssueUpdateDataInput!
        create: GitHubIssueCreateInput!
    }

    input GitHubIssueUpsertWithWhereUniqueWithoutLabelsInput {
        where: GitHubIssueWhereUniqueInput!
        update: GitHubIssueUpdateWithoutLabelsDataInput!
        create: GitHubIssueCreateWithoutLabelsInput!
    }

    input GitHubIssueWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        updatedAtExternal: DateTime
        updatedAtExternal_not: DateTime
        updatedAtExternal_in: [DateTime!]
        updatedAtExternal_not_in: [DateTime!]
        updatedAtExternal_lt: DateTime
        updatedAtExternal_lte: DateTime
        updatedAtExternal_gt: DateTime
        updatedAtExternal_gte: DateTime
        lastEditedAt: DateTime
        lastEditedAt_not: DateTime
        lastEditedAt_in: [DateTime!]
        lastEditedAt_not_in: [DateTime!]
        lastEditedAt_lt: DateTime
        lastEditedAt_lte: DateTime
        lastEditedAt_gt: DateTime
        lastEditedAt_gte: DateTime
        assignees_some: GitHubUserWhereInput
        author: GitHubUserWhereInput
        comments_some: GitHubCommentWhereInput
        labels_some: GitHubLabelWhereInput
        participants_some: GitHubUserWhereInput
        bodyText: String
        bodyText_not: String
        bodyText_in: [String!]
        bodyText_not_in: [String!]
        bodyText_lt: String
        bodyText_lte: String
        bodyText_gt: String
        bodyText_gte: String
        bodyText_contains: String
        bodyText_not_contains: String
        bodyText_starts_with: String
        bodyText_not_starts_with: String
        bodyText_ends_with: String
        bodyText_not_ends_with: String
        closed: DateTime
        closed_not: DateTime
        closed_in: [DateTime!]
        closed_not_in: [DateTime!]
        closed_lt: DateTime
        closed_lte: DateTime
        closed_gt: DateTime
        closed_gte: DateTime
        locked: Boolean
        locked_not: Boolean
        number: Int
        number_not: Int
        number_in: [Int!]
        number_not_in: [Int!]
        number_lt: Int
        number_lte: Int
        number_gt: Int
        number_gte: Int
        state: String
        state_not: String
        state_in: [String!]
        state_not_in: [String!]
        state_lt: String
        state_lte: String
        state_gt: String
        state_gte: String
        state_contains: String
        state_not_contains: String
        state_starts_with: String
        state_not_starts_with: String
        state_ends_with: String
        state_not_ends_with: String
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubIssueWhereInput!]
    }

    input GitHubIssueWhereUniqueInput {
        id: ID
    }

    type GitHubLabel {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        updatedAtExternal: DateTime!
        createdAtExternal: DateTime!
        issues(
            where: GitHubIssueWhereInput
            orderBy: GitHubIssueOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubIssue!]
        pullRequests(
            where: GitHubPullRequestWhereInput
            orderBy: GitHubPullRequestOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubPullRequest!]
        color: String!
        description: String!
        name: String!
        url: String!
    }

    type GitHubLabelConnection {
        pageInfo: PageInfo!
        edges: [GitHubLabelEdge]!
        aggregate: AggregateGitHubLabel!
    }

    input GitHubLabelCreateInput {
        id: ID
        updatedAtExternal: DateTime!
        createdAtExternal: DateTime!
        issues: GitHubIssueCreateManyWithoutLabelsInput
        pullRequests: GitHubPullRequestCreateManyWithoutLabelsInput
        color: String!
        description: String!
        name: String!
        url: String!
    }

    input GitHubLabelCreateManyWithoutIssuesInput {
        create: [GitHubLabelCreateWithoutIssuesInput!]
        connect: [GitHubLabelWhereUniqueInput!]
    }

    input GitHubLabelCreateManyWithoutPullRequestsInput {
        create: [GitHubLabelCreateWithoutPullRequestsInput!]
        connect: [GitHubLabelWhereUniqueInput!]
    }

    input GitHubLabelCreateWithoutIssuesInput {
        id: ID
        updatedAtExternal: DateTime!
        createdAtExternal: DateTime!
        pullRequests: GitHubPullRequestCreateManyWithoutLabelsInput
        color: String!
        description: String!
        name: String!
        url: String!
    }

    input GitHubLabelCreateWithoutPullRequestsInput {
        id: ID
        updatedAtExternal: DateTime!
        createdAtExternal: DateTime!
        issues: GitHubIssueCreateManyWithoutLabelsInput
        color: String!
        description: String!
        name: String!
        url: String!
    }

    type GitHubLabelEdge {
        node: GitHubLabel!
        cursor: String!
    }

    enum GitHubLabelOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        updatedAtExternal_ASC
        updatedAtExternal_DESC
        createdAtExternal_ASC
        createdAtExternal_DESC
        color_ASC
        color_DESC
        description_ASC
        description_DESC
        name_ASC
        name_DESC
        url_ASC
        url_DESC
    }

    type GitHubLabelPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        updatedAtExternal: DateTime!
        createdAtExternal: DateTime!
        color: String!
        description: String!
        name: String!
        url: String!
    }

    input GitHubLabelScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        updatedAtExternal: DateTime
        updatedAtExternal_not: DateTime
        updatedAtExternal_in: [DateTime!]
        updatedAtExternal_not_in: [DateTime!]
        updatedAtExternal_lt: DateTime
        updatedAtExternal_lte: DateTime
        updatedAtExternal_gt: DateTime
        updatedAtExternal_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        color: String
        color_not: String
        color_in: [String!]
        color_not_in: [String!]
        color_lt: String
        color_lte: String
        color_gt: String
        color_gte: String
        color_contains: String
        color_not_contains: String
        color_starts_with: String
        color_not_starts_with: String
        color_ends_with: String
        color_not_ends_with: String
        description: String
        description_not: String
        description_in: [String!]
        description_not_in: [String!]
        description_lt: String
        description_lte: String
        description_gt: String
        description_gte: String
        description_contains: String
        description_not_contains: String
        description_starts_with: String
        description_not_starts_with: String
        description_ends_with: String
        description_not_ends_with: String
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubLabelScalarWhereInput!]
        OR: [GitHubLabelScalarWhereInput!]
        NOT: [GitHubLabelScalarWhereInput!]
    }

    type GitHubLabelSubscriptionPayload {
        mutation: MutationType!
        node: GitHubLabel
        updatedFields: [String!]
        previousValues: GitHubLabelPreviousValues
    }

    input GitHubLabelSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubLabelWhereInput
        AND: [GitHubLabelSubscriptionWhereInput!]
    }

    input GitHubLabelUpdateInput {
        updatedAtExternal: DateTime
        createdAtExternal: DateTime
        issues: GitHubIssueUpdateManyWithoutLabelsInput
        pullRequests: GitHubPullRequestUpdateManyWithoutLabelsInput
        color: String
        description: String
        name: String
        url: String
    }

    input GitHubLabelUpdateManyDataInput {
        updatedAtExternal: DateTime
        createdAtExternal: DateTime
        color: String
        description: String
        name: String
        url: String
    }

    input GitHubLabelUpdateManyMutationInput {
        updatedAtExternal: DateTime
        createdAtExternal: DateTime
        color: String
        description: String
        name: String
        url: String
    }

    input GitHubLabelUpdateManyWithoutIssuesInput {
        create: [GitHubLabelCreateWithoutIssuesInput!]
        delete: [GitHubLabelWhereUniqueInput!]
        connect: [GitHubLabelWhereUniqueInput!]
        set: [GitHubLabelWhereUniqueInput!]
        disconnect: [GitHubLabelWhereUniqueInput!]
        update: [GitHubLabelUpdateWithWhereUniqueWithoutIssuesInput!]
        upsert: [GitHubLabelUpsertWithWhereUniqueWithoutIssuesInput!]
        deleteMany: [GitHubLabelScalarWhereInput!]
        updateMany: [GitHubLabelUpdateManyWithWhereNestedInput!]
    }

    input GitHubLabelUpdateManyWithoutPullRequestsInput {
        create: [GitHubLabelCreateWithoutPullRequestsInput!]
        delete: [GitHubLabelWhereUniqueInput!]
        connect: [GitHubLabelWhereUniqueInput!]
        set: [GitHubLabelWhereUniqueInput!]
        disconnect: [GitHubLabelWhereUniqueInput!]
        update: [GitHubLabelUpdateWithWhereUniqueWithoutPullRequestsInput!]
        upsert: [GitHubLabelUpsertWithWhereUniqueWithoutPullRequestsInput!]
        deleteMany: [GitHubLabelScalarWhereInput!]
        updateMany: [GitHubLabelUpdateManyWithWhereNestedInput!]
    }

    input GitHubLabelUpdateManyWithWhereNestedInput {
        where: GitHubLabelScalarWhereInput!
        data: GitHubLabelUpdateManyDataInput!
    }

    input GitHubLabelUpdateWithoutIssuesDataInput {
        updatedAtExternal: DateTime
        createdAtExternal: DateTime
        pullRequests: GitHubPullRequestUpdateManyWithoutLabelsInput
        color: String
        description: String
        name: String
        url: String
    }

    input GitHubLabelUpdateWithoutPullRequestsDataInput {
        updatedAtExternal: DateTime
        createdAtExternal: DateTime
        issues: GitHubIssueUpdateManyWithoutLabelsInput
        color: String
        description: String
        name: String
        url: String
    }

    input GitHubLabelUpdateWithWhereUniqueWithoutIssuesInput {
        where: GitHubLabelWhereUniqueInput!
        data: GitHubLabelUpdateWithoutIssuesDataInput!
    }

    input GitHubLabelUpdateWithWhereUniqueWithoutPullRequestsInput {
        where: GitHubLabelWhereUniqueInput!
        data: GitHubLabelUpdateWithoutPullRequestsDataInput!
    }

    input GitHubLabelUpsertWithWhereUniqueWithoutIssuesInput {
        where: GitHubLabelWhereUniqueInput!
        update: GitHubLabelUpdateWithoutIssuesDataInput!
        create: GitHubLabelCreateWithoutIssuesInput!
    }

    input GitHubLabelUpsertWithWhereUniqueWithoutPullRequestsInput {
        where: GitHubLabelWhereUniqueInput!
        update: GitHubLabelUpdateWithoutPullRequestsDataInput!
        create: GitHubLabelCreateWithoutPullRequestsInput!
    }

    input GitHubLabelWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        updatedAtExternal: DateTime
        updatedAtExternal_not: DateTime
        updatedAtExternal_in: [DateTime!]
        updatedAtExternal_not_in: [DateTime!]
        updatedAtExternal_lt: DateTime
        updatedAtExternal_lte: DateTime
        updatedAtExternal_gt: DateTime
        updatedAtExternal_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        issues_some: GitHubIssueWhereInput
        pullRequests_some: GitHubPullRequestWhereInput
        color: String
        color_not: String
        color_in: [String!]
        color_not_in: [String!]
        color_lt: String
        color_lte: String
        color_gt: String
        color_gte: String
        color_contains: String
        color_not_contains: String
        color_starts_with: String
        color_not_starts_with: String
        color_ends_with: String
        color_not_ends_with: String
        description: String
        description_not: String
        description_in: [String!]
        description_not_in: [String!]
        description_lt: String
        description_lte: String
        description_gt: String
        description_gte: String
        description_contains: String
        description_not_contains: String
        description_starts_with: String
        description_not_starts_with: String
        description_ends_with: String
        description_not_ends_with: String
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubLabelWhereInput!]
    }

    input GitHubLabelWhereUniqueInput {
        id: ID
    }

    type GitHubPullRequest {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        createdAtExternal: DateTime!
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser!]
        author: GitHubUser!
        comments(
            where: GitHubCommentWhereInput
            orderBy: GitHubCommentOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubComment!]
        commits(
            where: GitHubCommitWhereInput
            orderBy: GitHubCommitOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubCommit!]
        files(
            where: GitHubFileDiffWhereInput
            orderBy: GitHubFileDiffOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubFileDiff!]
        labels(
            where: GitHubLabelWhereInput
            orderBy: GitHubLabelOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubLabel!]
        participants(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser!]
        reviewRequests(
            where: GitHubReviewRequestWhereInput
            orderBy: GitHubReviewRequestOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubReviewRequest!]
        reviews(
            where: GitHubPullRequestReviewWhereInput
            orderBy: GitHubPullRequestReviewOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubPullRequestReview!]
        reviewThreads(
            where: GitHubReviewThreadWhereInput
            orderBy: GitHubReviewThreadOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubReviewThread!]
        mergedBy: GitHubUser
        number: Int!
        closed: Boolean!
        isCrossRepository: Boolean!
        locked: Boolean!
        merged: Boolean!
        additions: Int!
        changedFiles: Int!
        deletions: Int!
        bodyText: String!
    }

    type GitHubPullRequestConnection {
        pageInfo: PageInfo!
        edges: [GitHubPullRequestEdge]!
        aggregate: AggregateGitHubPullRequest!
    }

    input GitHubPullRequestCreateInput {
        id: ID
        createdAtExternal: DateTime!
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserCreateManyInput
        author: GitHubUserCreateOneInput!
        comments: GitHubCommentCreateManyInput
        commits: GitHubCommitCreateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffCreateManyInput
        labels: GitHubLabelCreateManyWithoutPullRequestsInput
        participants: GitHubUserCreateManyInput
        reviewRequests: GitHubReviewRequestCreateManyWithoutPullRequestInput
        reviews: GitHubPullRequestReviewCreateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadCreateManyWithoutPullRequestInput
        mergedBy: GitHubUserCreateOneInput
        number: Int!
        closed: Boolean!
        isCrossRepository: Boolean!
        locked: Boolean!
        merged: Boolean!
        additions: Int!
        changedFiles: Int!
        deletions: Int!
        bodyText: String!
    }

    input GitHubPullRequestCreateManyInput {
        create: [GitHubPullRequestCreateInput!]
        connect: [GitHubPullRequestWhereUniqueInput!]
    }

    input GitHubPullRequestCreateManyWithoutCommitsInput {
        create: [GitHubPullRequestCreateWithoutCommitsInput!]
        connect: [GitHubPullRequestWhereUniqueInput!]
    }

    input GitHubPullRequestCreateManyWithoutLabelsInput {
        create: [GitHubPullRequestCreateWithoutLabelsInput!]
        connect: [GitHubPullRequestWhereUniqueInput!]
    }

    input GitHubPullRequestCreateOneInput {
        create: GitHubPullRequestCreateInput
        connect: GitHubPullRequestWhereUniqueInput
    }

    input GitHubPullRequestCreateOneWithoutReviewRequestsInput {
        create: GitHubPullRequestCreateWithoutReviewRequestsInput
        connect: GitHubPullRequestWhereUniqueInput
    }

    input GitHubPullRequestCreateOneWithoutReviewsInput {
        create: GitHubPullRequestCreateWithoutReviewsInput
        connect: GitHubPullRequestWhereUniqueInput
    }

    input GitHubPullRequestCreateOneWithoutReviewThreadsInput {
        create: GitHubPullRequestCreateWithoutReviewThreadsInput
        connect: GitHubPullRequestWhereUniqueInput
    }

    input GitHubPullRequestCreateWithoutCommitsInput {
        id: ID
        createdAtExternal: DateTime!
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserCreateManyInput
        author: GitHubUserCreateOneInput!
        comments: GitHubCommentCreateManyInput
        files: GitHubFileDiffCreateManyInput
        labels: GitHubLabelCreateManyWithoutPullRequestsInput
        participants: GitHubUserCreateManyInput
        reviewRequests: GitHubReviewRequestCreateManyWithoutPullRequestInput
        reviews: GitHubPullRequestReviewCreateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadCreateManyWithoutPullRequestInput
        mergedBy: GitHubUserCreateOneInput
        number: Int!
        closed: Boolean!
        isCrossRepository: Boolean!
        locked: Boolean!
        merged: Boolean!
        additions: Int!
        changedFiles: Int!
        deletions: Int!
        bodyText: String!
    }

    input GitHubPullRequestCreateWithoutLabelsInput {
        id: ID
        createdAtExternal: DateTime!
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserCreateManyInput
        author: GitHubUserCreateOneInput!
        comments: GitHubCommentCreateManyInput
        commits: GitHubCommitCreateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffCreateManyInput
        participants: GitHubUserCreateManyInput
        reviewRequests: GitHubReviewRequestCreateManyWithoutPullRequestInput
        reviews: GitHubPullRequestReviewCreateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadCreateManyWithoutPullRequestInput
        mergedBy: GitHubUserCreateOneInput
        number: Int!
        closed: Boolean!
        isCrossRepository: Boolean!
        locked: Boolean!
        merged: Boolean!
        additions: Int!
        changedFiles: Int!
        deletions: Int!
        bodyText: String!
    }

    input GitHubPullRequestCreateWithoutReviewRequestsInput {
        id: ID
        createdAtExternal: DateTime!
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserCreateManyInput
        author: GitHubUserCreateOneInput!
        comments: GitHubCommentCreateManyInput
        commits: GitHubCommitCreateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffCreateManyInput
        labels: GitHubLabelCreateManyWithoutPullRequestsInput
        participants: GitHubUserCreateManyInput
        reviews: GitHubPullRequestReviewCreateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadCreateManyWithoutPullRequestInput
        mergedBy: GitHubUserCreateOneInput
        number: Int!
        closed: Boolean!
        isCrossRepository: Boolean!
        locked: Boolean!
        merged: Boolean!
        additions: Int!
        changedFiles: Int!
        deletions: Int!
        bodyText: String!
    }

    input GitHubPullRequestCreateWithoutReviewsInput {
        id: ID
        createdAtExternal: DateTime!
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserCreateManyInput
        author: GitHubUserCreateOneInput!
        comments: GitHubCommentCreateManyInput
        commits: GitHubCommitCreateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffCreateManyInput
        labels: GitHubLabelCreateManyWithoutPullRequestsInput
        participants: GitHubUserCreateManyInput
        reviewRequests: GitHubReviewRequestCreateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadCreateManyWithoutPullRequestInput
        mergedBy: GitHubUserCreateOneInput
        number: Int!
        closed: Boolean!
        isCrossRepository: Boolean!
        locked: Boolean!
        merged: Boolean!
        additions: Int!
        changedFiles: Int!
        deletions: Int!
        bodyText: String!
    }

    input GitHubPullRequestCreateWithoutReviewThreadsInput {
        id: ID
        createdAtExternal: DateTime!
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserCreateManyInput
        author: GitHubUserCreateOneInput!
        comments: GitHubCommentCreateManyInput
        commits: GitHubCommitCreateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffCreateManyInput
        labels: GitHubLabelCreateManyWithoutPullRequestsInput
        participants: GitHubUserCreateManyInput
        reviewRequests: GitHubReviewRequestCreateManyWithoutPullRequestInput
        reviews: GitHubPullRequestReviewCreateManyWithoutPullRequestInput
        mergedBy: GitHubUserCreateOneInput
        number: Int!
        closed: Boolean!
        isCrossRepository: Boolean!
        locked: Boolean!
        merged: Boolean!
        additions: Int!
        changedFiles: Int!
        deletions: Int!
        bodyText: String!
    }

    type GitHubPullRequestEdge {
        node: GitHubPullRequest!
        cursor: String!
    }

    enum GitHubPullRequestOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        createdAtExternal_ASC
        createdAtExternal_DESC
        publishedAt_ASC
        publishedAt_DESC
        closedAt_ASC
        closedAt_DESC
        mergedAt_ASC
        mergedAt_DESC
        number_ASC
        number_DESC
        closed_ASC
        closed_DESC
        isCrossRepository_ASC
        isCrossRepository_DESC
        locked_ASC
        locked_DESC
        merged_ASC
        merged_DESC
        additions_ASC
        additions_DESC
        changedFiles_ASC
        changedFiles_DESC
        deletions_ASC
        deletions_DESC
        bodyText_ASC
        bodyText_DESC
    }

    type GitHubPullRequestPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        createdAtExternal: DateTime!
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        number: Int!
        closed: Boolean!
        isCrossRepository: Boolean!
        locked: Boolean!
        merged: Boolean!
        additions: Int!
        changedFiles: Int!
        deletions: Int!
        bodyText: String!
    }

    type GitHubPullRequestReview {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        submittedAt: DateTime!
        lastEditedAt: DateTime!
        publishedAt: DateTime!
        author: GitHubUser!
        comments(
            where: GitHubCommentWhereInput
            orderBy: GitHubCommentOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubComment!]
        commit(
            where: GitHubCommitWhereInput
            orderBy: GitHubCommitOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubCommit!]
        pullRequest: GitHubPullRequest!
        state: String!
        bodyText: String!
        url: String!
    }

    type GitHubPullRequestReviewConnection {
        pageInfo: PageInfo!
        edges: [GitHubPullRequestReviewEdge]!
        aggregate: AggregateGitHubPullRequestReview!
    }

    input GitHubPullRequestReviewCreateInput {
        id: ID
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        submittedAt: DateTime!
        lastEditedAt: DateTime!
        publishedAt: DateTime!
        author: GitHubUserCreateOneInput!
        comments: GitHubCommentCreateManyInput
        commit: GitHubCommitCreateManyInput
        pullRequest: GitHubPullRequestCreateOneWithoutReviewsInput!
        state: String!
        bodyText: String!
        url: String!
    }

    input GitHubPullRequestReviewCreateManyWithoutPullRequestInput {
        create: [GitHubPullRequestReviewCreateWithoutPullRequestInput!]
        connect: [GitHubPullRequestReviewWhereUniqueInput!]
    }

    input GitHubPullRequestReviewCreateWithoutPullRequestInput {
        id: ID
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        submittedAt: DateTime!
        lastEditedAt: DateTime!
        publishedAt: DateTime!
        author: GitHubUserCreateOneInput!
        comments: GitHubCommentCreateManyInput
        commit: GitHubCommitCreateManyInput
        state: String!
        bodyText: String!
        url: String!
    }

    type GitHubPullRequestReviewEdge {
        node: GitHubPullRequestReview!
        cursor: String!
    }

    enum GitHubPullRequestReviewOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        createdAtExternal_ASC
        createdAtExternal_DESC
        updatedAtExternal_ASC
        updatedAtExternal_DESC
        submittedAt_ASC
        submittedAt_DESC
        lastEditedAt_ASC
        lastEditedAt_DESC
        publishedAt_ASC
        publishedAt_DESC
        state_ASC
        state_DESC
        bodyText_ASC
        bodyText_DESC
        url_ASC
        url_DESC
    }

    type GitHubPullRequestReviewPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        submittedAt: DateTime!
        lastEditedAt: DateTime!
        publishedAt: DateTime!
        state: String!
        bodyText: String!
        url: String!
    }

    input GitHubPullRequestReviewScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        updatedAtExternal: DateTime
        updatedAtExternal_not: DateTime
        updatedAtExternal_in: [DateTime!]
        updatedAtExternal_not_in: [DateTime!]
        updatedAtExternal_lt: DateTime
        updatedAtExternal_lte: DateTime
        updatedAtExternal_gt: DateTime
        updatedAtExternal_gte: DateTime
        submittedAt: DateTime
        submittedAt_not: DateTime
        submittedAt_in: [DateTime!]
        submittedAt_not_in: [DateTime!]
        submittedAt_lt: DateTime
        submittedAt_lte: DateTime
        submittedAt_gt: DateTime
        submittedAt_gte: DateTime
        lastEditedAt: DateTime
        lastEditedAt_not: DateTime
        lastEditedAt_in: [DateTime!]
        lastEditedAt_not_in: [DateTime!]
        lastEditedAt_lt: DateTime
        lastEditedAt_lte: DateTime
        lastEditedAt_gt: DateTime
        lastEditedAt_gte: DateTime
        publishedAt: DateTime
        publishedAt_not: DateTime
        publishedAt_in: [DateTime!]
        publishedAt_not_in: [DateTime!]
        publishedAt_lt: DateTime
        publishedAt_lte: DateTime
        publishedAt_gt: DateTime
        publishedAt_gte: DateTime
        state: String
        state_not: String
        state_in: [String!]
        state_not_in: [String!]
        state_lt: String
        state_lte: String
        state_gt: String
        state_gte: String
        state_contains: String
        state_not_contains: String
        state_starts_with: String
        state_not_starts_with: String
        state_ends_with: String
        state_not_ends_with: String
        bodyText: String
        bodyText_not: String
        bodyText_in: [String!]
        bodyText_not_in: [String!]
        bodyText_lt: String
        bodyText_lte: String
        bodyText_gt: String
        bodyText_gte: String
        bodyText_contains: String
        bodyText_not_contains: String
        bodyText_starts_with: String
        bodyText_not_starts_with: String
        bodyText_ends_with: String
        bodyText_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubPullRequestReviewScalarWhereInput!]
        OR: [GitHubPullRequestReviewScalarWhereInput!]
        NOT: [GitHubPullRequestReviewScalarWhereInput!]
    }

    type GitHubPullRequestReviewSubscriptionPayload {
        mutation: MutationType!
        node: GitHubPullRequestReview
        updatedFields: [String!]
        previousValues: GitHubPullRequestReviewPreviousValues
    }

    input GitHubPullRequestReviewSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubPullRequestReviewWhereInput
        AND: [GitHubPullRequestReviewSubscriptionWhereInput!]
    }

    input GitHubPullRequestReviewUpdateInput {
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        submittedAt: DateTime
        lastEditedAt: DateTime
        publishedAt: DateTime
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        commit: GitHubCommitUpdateManyInput
        pullRequest: GitHubPullRequestUpdateOneRequiredWithoutReviewsInput
        state: String
        bodyText: String
        url: String
    }

    input GitHubPullRequestReviewUpdateManyDataInput {
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        submittedAt: DateTime
        lastEditedAt: DateTime
        publishedAt: DateTime
        state: String
        bodyText: String
        url: String
    }

    input GitHubPullRequestReviewUpdateManyMutationInput {
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        submittedAt: DateTime
        lastEditedAt: DateTime
        publishedAt: DateTime
        state: String
        bodyText: String
        url: String
    }

    input GitHubPullRequestReviewUpdateManyWithoutPullRequestInput {
        create: [GitHubPullRequestReviewCreateWithoutPullRequestInput!]
        delete: [GitHubPullRequestReviewWhereUniqueInput!]
        connect: [GitHubPullRequestReviewWhereUniqueInput!]
        set: [GitHubPullRequestReviewWhereUniqueInput!]
        disconnect: [GitHubPullRequestReviewWhereUniqueInput!]
        update: [GitHubPullRequestReviewUpdateWithWhereUniqueWithoutPullRequestInput!]
        upsert: [GitHubPullRequestReviewUpsertWithWhereUniqueWithoutPullRequestInput!]
        deleteMany: [GitHubPullRequestReviewScalarWhereInput!]
        updateMany: [GitHubPullRequestReviewUpdateManyWithWhereNestedInput!]
    }

    input GitHubPullRequestReviewUpdateManyWithWhereNestedInput {
        where: GitHubPullRequestReviewScalarWhereInput!
        data: GitHubPullRequestReviewUpdateManyDataInput!
    }

    input GitHubPullRequestReviewUpdateWithoutPullRequestDataInput {
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        submittedAt: DateTime
        lastEditedAt: DateTime
        publishedAt: DateTime
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        commit: GitHubCommitUpdateManyInput
        state: String
        bodyText: String
        url: String
    }

    input GitHubPullRequestReviewUpdateWithWhereUniqueWithoutPullRequestInput {
        where: GitHubPullRequestReviewWhereUniqueInput!
        data: GitHubPullRequestReviewUpdateWithoutPullRequestDataInput!
    }

    input GitHubPullRequestReviewUpsertWithWhereUniqueWithoutPullRequestInput {
        where: GitHubPullRequestReviewWhereUniqueInput!
        update: GitHubPullRequestReviewUpdateWithoutPullRequestDataInput!
        create: GitHubPullRequestReviewCreateWithoutPullRequestInput!
    }

    input GitHubPullRequestReviewWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        updatedAtExternal: DateTime
        updatedAtExternal_not: DateTime
        updatedAtExternal_in: [DateTime!]
        updatedAtExternal_not_in: [DateTime!]
        updatedAtExternal_lt: DateTime
        updatedAtExternal_lte: DateTime
        updatedAtExternal_gt: DateTime
        updatedAtExternal_gte: DateTime
        submittedAt: DateTime
        submittedAt_not: DateTime
        submittedAt_in: [DateTime!]
        submittedAt_not_in: [DateTime!]
        submittedAt_lt: DateTime
        submittedAt_lte: DateTime
        submittedAt_gt: DateTime
        submittedAt_gte: DateTime
        lastEditedAt: DateTime
        lastEditedAt_not: DateTime
        lastEditedAt_in: [DateTime!]
        lastEditedAt_not_in: [DateTime!]
        lastEditedAt_lt: DateTime
        lastEditedAt_lte: DateTime
        lastEditedAt_gt: DateTime
        lastEditedAt_gte: DateTime
        publishedAt: DateTime
        publishedAt_not: DateTime
        publishedAt_in: [DateTime!]
        publishedAt_not_in: [DateTime!]
        publishedAt_lt: DateTime
        publishedAt_lte: DateTime
        publishedAt_gt: DateTime
        publishedAt_gte: DateTime
        author: GitHubUserWhereInput
        comments_some: GitHubCommentWhereInput
        commit_some: GitHubCommitWhereInput
        pullRequest: GitHubPullRequestWhereInput
        state: String
        state_not: String
        state_in: [String!]
        state_not_in: [String!]
        state_lt: String
        state_lte: String
        state_gt: String
        state_gte: String
        state_contains: String
        state_not_contains: String
        state_starts_with: String
        state_not_starts_with: String
        state_ends_with: String
        state_not_ends_with: String
        bodyText: String
        bodyText_not: String
        bodyText_in: [String!]
        bodyText_not_in: [String!]
        bodyText_lt: String
        bodyText_lte: String
        bodyText_gt: String
        bodyText_gte: String
        bodyText_contains: String
        bodyText_not_contains: String
        bodyText_starts_with: String
        bodyText_not_starts_with: String
        bodyText_ends_with: String
        bodyText_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubPullRequestReviewWhereInput!]
    }

    input GitHubPullRequestReviewWhereUniqueInput {
        id: ID
    }

    input GitHubPullRequestScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        publishedAt: DateTime
        publishedAt_not: DateTime
        publishedAt_in: [DateTime!]
        publishedAt_not_in: [DateTime!]
        publishedAt_lt: DateTime
        publishedAt_lte: DateTime
        publishedAt_gt: DateTime
        publishedAt_gte: DateTime
        closedAt: DateTime
        closedAt_not: DateTime
        closedAt_in: [DateTime!]
        closedAt_not_in: [DateTime!]
        closedAt_lt: DateTime
        closedAt_lte: DateTime
        closedAt_gt: DateTime
        closedAt_gte: DateTime
        mergedAt: DateTime
        mergedAt_not: DateTime
        mergedAt_in: [DateTime!]
        mergedAt_not_in: [DateTime!]
        mergedAt_lt: DateTime
        mergedAt_lte: DateTime
        mergedAt_gt: DateTime
        mergedAt_gte: DateTime
        number: Int
        number_not: Int
        number_in: [Int!]
        number_not_in: [Int!]
        number_lt: Int
        number_lte: Int
        number_gt: Int
        number_gte: Int
        closed: Boolean
        closed_not: Boolean
        isCrossRepository: Boolean
        isCrossRepository_not: Boolean
        locked: Boolean
        locked_not: Boolean
        merged: Boolean
        merged_not: Boolean
        additions: Int
        additions_not: Int
        additions_in: [Int!]
        additions_not_in: [Int!]
        additions_lt: Int
        additions_lte: Int
        additions_gt: Int
        additions_gte: Int
        changedFiles: Int
        changedFiles_not: Int
        changedFiles_in: [Int!]
        changedFiles_not_in: [Int!]
        changedFiles_lt: Int
        changedFiles_lte: Int
        changedFiles_gt: Int
        changedFiles_gte: Int
        deletions: Int
        deletions_not: Int
        deletions_in: [Int!]
        deletions_not_in: [Int!]
        deletions_lt: Int
        deletions_lte: Int
        deletions_gt: Int
        deletions_gte: Int
        bodyText: String
        bodyText_not: String
        bodyText_in: [String!]
        bodyText_not_in: [String!]
        bodyText_lt: String
        bodyText_lte: String
        bodyText_gt: String
        bodyText_gte: String
        bodyText_contains: String
        bodyText_not_contains: String
        bodyText_starts_with: String
        bodyText_not_starts_with: String
        bodyText_ends_with: String
        bodyText_not_ends_with: String
        AND: [GitHubPullRequestScalarWhereInput!]
        OR: [GitHubPullRequestScalarWhereInput!]
        NOT: [GitHubPullRequestScalarWhereInput!]
    }

    type GitHubPullRequestSubscriptionPayload {
        mutation: MutationType!
        node: GitHubPullRequest
        updatedFields: [String!]
        previousValues: GitHubPullRequestPreviousValues
    }

    input GitHubPullRequestSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubPullRequestWhereInput
        AND: [GitHubPullRequestSubscriptionWhereInput!]
    }

    input GitHubPullRequestUpdateDataInput {
        createdAtExternal: DateTime
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserUpdateManyInput
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        commits: GitHubCommitUpdateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffUpdateManyInput
        labels: GitHubLabelUpdateManyWithoutPullRequestsInput
        participants: GitHubUserUpdateManyInput
        reviewRequests: GitHubReviewRequestUpdateManyWithoutPullRequestInput
        reviews: GitHubPullRequestReviewUpdateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadUpdateManyWithoutPullRequestInput
        mergedBy: GitHubUserUpdateOneInput
        number: Int
        closed: Boolean
        isCrossRepository: Boolean
        locked: Boolean
        merged: Boolean
        additions: Int
        changedFiles: Int
        deletions: Int
        bodyText: String
    }

    input GitHubPullRequestUpdateInput {
        createdAtExternal: DateTime
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserUpdateManyInput
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        commits: GitHubCommitUpdateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffUpdateManyInput
        labels: GitHubLabelUpdateManyWithoutPullRequestsInput
        participants: GitHubUserUpdateManyInput
        reviewRequests: GitHubReviewRequestUpdateManyWithoutPullRequestInput
        reviews: GitHubPullRequestReviewUpdateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadUpdateManyWithoutPullRequestInput
        mergedBy: GitHubUserUpdateOneInput
        number: Int
        closed: Boolean
        isCrossRepository: Boolean
        locked: Boolean
        merged: Boolean
        additions: Int
        changedFiles: Int
        deletions: Int
        bodyText: String
    }

    input GitHubPullRequestUpdateManyDataInput {
        createdAtExternal: DateTime
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        number: Int
        closed: Boolean
        isCrossRepository: Boolean
        locked: Boolean
        merged: Boolean
        additions: Int
        changedFiles: Int
        deletions: Int
        bodyText: String
    }

    input GitHubPullRequestUpdateManyInput {
        create: [GitHubPullRequestCreateInput!]
        update: [GitHubPullRequestUpdateWithWhereUniqueNestedInput!]
        upsert: [GitHubPullRequestUpsertWithWhereUniqueNestedInput!]
        delete: [GitHubPullRequestWhereUniqueInput!]
        connect: [GitHubPullRequestWhereUniqueInput!]
        set: [GitHubPullRequestWhereUniqueInput!]
        disconnect: [GitHubPullRequestWhereUniqueInput!]
        deleteMany: [GitHubPullRequestScalarWhereInput!]
        updateMany: [GitHubPullRequestUpdateManyWithWhereNestedInput!]
    }

    input GitHubPullRequestUpdateManyMutationInput {
        createdAtExternal: DateTime
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        number: Int
        closed: Boolean
        isCrossRepository: Boolean
        locked: Boolean
        merged: Boolean
        additions: Int
        changedFiles: Int
        deletions: Int
        bodyText: String
    }

    input GitHubPullRequestUpdateManyWithoutCommitsInput {
        create: [GitHubPullRequestCreateWithoutCommitsInput!]
        delete: [GitHubPullRequestWhereUniqueInput!]
        connect: [GitHubPullRequestWhereUniqueInput!]
        set: [GitHubPullRequestWhereUniqueInput!]
        disconnect: [GitHubPullRequestWhereUniqueInput!]
        update: [GitHubPullRequestUpdateWithWhereUniqueWithoutCommitsInput!]
        upsert: [GitHubPullRequestUpsertWithWhereUniqueWithoutCommitsInput!]
        deleteMany: [GitHubPullRequestScalarWhereInput!]
        updateMany: [GitHubPullRequestUpdateManyWithWhereNestedInput!]
    }

    input GitHubPullRequestUpdateManyWithoutLabelsInput {
        create: [GitHubPullRequestCreateWithoutLabelsInput!]
        delete: [GitHubPullRequestWhereUniqueInput!]
        connect: [GitHubPullRequestWhereUniqueInput!]
        set: [GitHubPullRequestWhereUniqueInput!]
        disconnect: [GitHubPullRequestWhereUniqueInput!]
        update: [GitHubPullRequestUpdateWithWhereUniqueWithoutLabelsInput!]
        upsert: [GitHubPullRequestUpsertWithWhereUniqueWithoutLabelsInput!]
        deleteMany: [GitHubPullRequestScalarWhereInput!]
        updateMany: [GitHubPullRequestUpdateManyWithWhereNestedInput!]
    }

    input GitHubPullRequestUpdateManyWithWhereNestedInput {
        where: GitHubPullRequestScalarWhereInput!
        data: GitHubPullRequestUpdateManyDataInput!
    }

    input GitHubPullRequestUpdateOneInput {
        create: GitHubPullRequestCreateInput
        update: GitHubPullRequestUpdateDataInput
        upsert: GitHubPullRequestUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
        connect: GitHubPullRequestWhereUniqueInput
    }

    input GitHubPullRequestUpdateOneRequiredWithoutReviewRequestsInput {
        create: GitHubPullRequestCreateWithoutReviewRequestsInput
        update: GitHubPullRequestUpdateWithoutReviewRequestsDataInput
        upsert: GitHubPullRequestUpsertWithoutReviewRequestsInput
        connect: GitHubPullRequestWhereUniqueInput
    }

    input GitHubPullRequestUpdateOneRequiredWithoutReviewsInput {
        create: GitHubPullRequestCreateWithoutReviewsInput
        update: GitHubPullRequestUpdateWithoutReviewsDataInput
        upsert: GitHubPullRequestUpsertWithoutReviewsInput
        connect: GitHubPullRequestWhereUniqueInput
    }

    input GitHubPullRequestUpdateOneRequiredWithoutReviewThreadsInput {
        create: GitHubPullRequestCreateWithoutReviewThreadsInput
        update: GitHubPullRequestUpdateWithoutReviewThreadsDataInput
        upsert: GitHubPullRequestUpsertWithoutReviewThreadsInput
        connect: GitHubPullRequestWhereUniqueInput
    }

    input GitHubPullRequestUpdateWithoutCommitsDataInput {
        createdAtExternal: DateTime
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserUpdateManyInput
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        files: GitHubFileDiffUpdateManyInput
        labels: GitHubLabelUpdateManyWithoutPullRequestsInput
        participants: GitHubUserUpdateManyInput
        reviewRequests: GitHubReviewRequestUpdateManyWithoutPullRequestInput
        reviews: GitHubPullRequestReviewUpdateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadUpdateManyWithoutPullRequestInput
        mergedBy: GitHubUserUpdateOneInput
        number: Int
        closed: Boolean
        isCrossRepository: Boolean
        locked: Boolean
        merged: Boolean
        additions: Int
        changedFiles: Int
        deletions: Int
        bodyText: String
    }

    input GitHubPullRequestUpdateWithoutLabelsDataInput {
        createdAtExternal: DateTime
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserUpdateManyInput
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        commits: GitHubCommitUpdateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffUpdateManyInput
        participants: GitHubUserUpdateManyInput
        reviewRequests: GitHubReviewRequestUpdateManyWithoutPullRequestInput
        reviews: GitHubPullRequestReviewUpdateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadUpdateManyWithoutPullRequestInput
        mergedBy: GitHubUserUpdateOneInput
        number: Int
        closed: Boolean
        isCrossRepository: Boolean
        locked: Boolean
        merged: Boolean
        additions: Int
        changedFiles: Int
        deletions: Int
        bodyText: String
    }

    input GitHubPullRequestUpdateWithoutReviewRequestsDataInput {
        createdAtExternal: DateTime
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserUpdateManyInput
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        commits: GitHubCommitUpdateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffUpdateManyInput
        labels: GitHubLabelUpdateManyWithoutPullRequestsInput
        participants: GitHubUserUpdateManyInput
        reviews: GitHubPullRequestReviewUpdateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadUpdateManyWithoutPullRequestInput
        mergedBy: GitHubUserUpdateOneInput
        number: Int
        closed: Boolean
        isCrossRepository: Boolean
        locked: Boolean
        merged: Boolean
        additions: Int
        changedFiles: Int
        deletions: Int
        bodyText: String
    }

    input GitHubPullRequestUpdateWithoutReviewsDataInput {
        createdAtExternal: DateTime
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserUpdateManyInput
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        commits: GitHubCommitUpdateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffUpdateManyInput
        labels: GitHubLabelUpdateManyWithoutPullRequestsInput
        participants: GitHubUserUpdateManyInput
        reviewRequests: GitHubReviewRequestUpdateManyWithoutPullRequestInput
        reviewThreads: GitHubReviewThreadUpdateManyWithoutPullRequestInput
        mergedBy: GitHubUserUpdateOneInput
        number: Int
        closed: Boolean
        isCrossRepository: Boolean
        locked: Boolean
        merged: Boolean
        additions: Int
        changedFiles: Int
        deletions: Int
        bodyText: String
    }

    input GitHubPullRequestUpdateWithoutReviewThreadsDataInput {
        createdAtExternal: DateTime
        publishedAt: DateTime
        closedAt: DateTime
        mergedAt: DateTime
        assignees: GitHubUserUpdateManyInput
        author: GitHubUserUpdateOneRequiredInput
        comments: GitHubCommentUpdateManyInput
        commits: GitHubCommitUpdateManyWithoutAssociatedPullRequestsInput
        files: GitHubFileDiffUpdateManyInput
        labels: GitHubLabelUpdateManyWithoutPullRequestsInput
        participants: GitHubUserUpdateManyInput
        reviewRequests: GitHubReviewRequestUpdateManyWithoutPullRequestInput
        reviews: GitHubPullRequestReviewUpdateManyWithoutPullRequestInput
        mergedBy: GitHubUserUpdateOneInput
        number: Int
        closed: Boolean
        isCrossRepository: Boolean
        locked: Boolean
        merged: Boolean
        additions: Int
        changedFiles: Int
        deletions: Int
        bodyText: String
    }

    input GitHubPullRequestUpdateWithWhereUniqueNestedInput {
        where: GitHubPullRequestWhereUniqueInput!
        data: GitHubPullRequestUpdateDataInput!
    }

    input GitHubPullRequestUpdateWithWhereUniqueWithoutCommitsInput {
        where: GitHubPullRequestWhereUniqueInput!
        data: GitHubPullRequestUpdateWithoutCommitsDataInput!
    }

    input GitHubPullRequestUpdateWithWhereUniqueWithoutLabelsInput {
        where: GitHubPullRequestWhereUniqueInput!
        data: GitHubPullRequestUpdateWithoutLabelsDataInput!
    }

    input GitHubPullRequestUpsertNestedInput {
        update: GitHubPullRequestUpdateDataInput!
        create: GitHubPullRequestCreateInput!
    }

    input GitHubPullRequestUpsertWithoutReviewRequestsInput {
        update: GitHubPullRequestUpdateWithoutReviewRequestsDataInput!
        create: GitHubPullRequestCreateWithoutReviewRequestsInput!
    }

    input GitHubPullRequestUpsertWithoutReviewsInput {
        update: GitHubPullRequestUpdateWithoutReviewsDataInput!
        create: GitHubPullRequestCreateWithoutReviewsInput!
    }

    input GitHubPullRequestUpsertWithoutReviewThreadsInput {
        update: GitHubPullRequestUpdateWithoutReviewThreadsDataInput!
        create: GitHubPullRequestCreateWithoutReviewThreadsInput!
    }

    input GitHubPullRequestUpsertWithWhereUniqueNestedInput {
        where: GitHubPullRequestWhereUniqueInput!
        update: GitHubPullRequestUpdateDataInput!
        create: GitHubPullRequestCreateInput!
    }

    input GitHubPullRequestUpsertWithWhereUniqueWithoutCommitsInput {
        where: GitHubPullRequestWhereUniqueInput!
        update: GitHubPullRequestUpdateWithoutCommitsDataInput!
        create: GitHubPullRequestCreateWithoutCommitsInput!
    }

    input GitHubPullRequestUpsertWithWhereUniqueWithoutLabelsInput {
        where: GitHubPullRequestWhereUniqueInput!
        update: GitHubPullRequestUpdateWithoutLabelsDataInput!
        create: GitHubPullRequestCreateWithoutLabelsInput!
    }

    input GitHubPullRequestWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        publishedAt: DateTime
        publishedAt_not: DateTime
        publishedAt_in: [DateTime!]
        publishedAt_not_in: [DateTime!]
        publishedAt_lt: DateTime
        publishedAt_lte: DateTime
        publishedAt_gt: DateTime
        publishedAt_gte: DateTime
        closedAt: DateTime
        closedAt_not: DateTime
        closedAt_in: [DateTime!]
        closedAt_not_in: [DateTime!]
        closedAt_lt: DateTime
        closedAt_lte: DateTime
        closedAt_gt: DateTime
        closedAt_gte: DateTime
        mergedAt: DateTime
        mergedAt_not: DateTime
        mergedAt_in: [DateTime!]
        mergedAt_not_in: [DateTime!]
        mergedAt_lt: DateTime
        mergedAt_lte: DateTime
        mergedAt_gt: DateTime
        mergedAt_gte: DateTime
        assignees_some: GitHubUserWhereInput
        author: GitHubUserWhereInput
        comments_some: GitHubCommentWhereInput
        commits_some: GitHubCommitWhereInput
        files_some: GitHubFileDiffWhereInput
        labels_some: GitHubLabelWhereInput
        participants_some: GitHubUserWhereInput
        reviewRequests_some: GitHubReviewRequestWhereInput
        reviews_some: GitHubPullRequestReviewWhereInput
        reviewThreads_some: GitHubReviewThreadWhereInput
        mergedBy: GitHubUserWhereInput
        number: Int
        number_not: Int
        number_in: [Int!]
        number_not_in: [Int!]
        number_lt: Int
        number_lte: Int
        number_gt: Int
        number_gte: Int
        closed: Boolean
        closed_not: Boolean
        isCrossRepository: Boolean
        isCrossRepository_not: Boolean
        locked: Boolean
        locked_not: Boolean
        merged: Boolean
        merged_not: Boolean
        additions: Int
        additions_not: Int
        additions_in: [Int!]
        additions_not_in: [Int!]
        additions_lt: Int
        additions_lte: Int
        additions_gt: Int
        additions_gte: Int
        changedFiles: Int
        changedFiles_not: Int
        changedFiles_in: [Int!]
        changedFiles_not_in: [Int!]
        changedFiles_lt: Int
        changedFiles_lte: Int
        changedFiles_gt: Int
        changedFiles_gte: Int
        deletions: Int
        deletions_not: Int
        deletions_in: [Int!]
        deletions_not_in: [Int!]
        deletions_lt: Int
        deletions_lte: Int
        deletions_gt: Int
        deletions_gte: Int
        bodyText: String
        bodyText_not: String
        bodyText_in: [String!]
        bodyText_not_in: [String!]
        bodyText_lt: String
        bodyText_lte: String
        bodyText_gt: String
        bodyText_gte: String
        bodyText_contains: String
        bodyText_not_contains: String
        bodyText_starts_with: String
        bodyText_not_starts_with: String
        bodyText_ends_with: String
        bodyText_not_ends_with: String
        AND: [GitHubPullRequestWhereInput!]
    }

    input GitHubPullRequestWhereUniqueInput {
        id: ID
    }

    type GitHubRepository {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        updatedAtExternal: DateTime!
        collaborators(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser!]
        owner: GitHubUser!
        repositoryTopics(
            where: GitHubTopicWhereInput
            orderBy: GitHubTopicOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubTopic!]
        stargazers(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser!]
        watchers(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser!]
        hasBranchRules: Boolean!
        hasContributingGuidelines: Boolean!
        hasPullRequestTemplate: Boolean!
        hasReadMe: Boolean!
        hasWiki: Boolean!
        isArchived: Boolean!
        isDisabled: Boolean!
        isFork: Boolean!
        isLocked: Boolean!
        isPrivate: Boolean!
        description: String!
        license: String
        name: String!
        primaryLanguage: String
        sshUrl: String!
        url: String!
    }

    type GitHubRepositoryConnection {
        pageInfo: PageInfo!
        edges: [GitHubRepositoryEdge]!
        aggregate: AggregateGitHubRepository!
    }

    input GitHubRepositoryCreateInput {
        id: ID
        updatedAtExternal: DateTime!
        collaborators: GitHubUserCreateManyInput
        owner: GitHubUserCreateOneInput!
        repositoryTopics: GitHubTopicCreateManyInput
        stargazers: GitHubUserCreateManyInput
        watchers: GitHubUserCreateManyInput
        hasBranchRules: Boolean!
        hasContributingGuidelines: Boolean!
        hasPullRequestTemplate: Boolean!
        hasReadMe: Boolean!
        hasWiki: Boolean!
        isArchived: Boolean!
        isDisabled: Boolean!
        isFork: Boolean!
        isLocked: Boolean!
        isPrivate: Boolean!
        description: String!
        license: String
        name: String!
        primaryLanguage: String
        sshUrl: String!
        url: String!
    }

    input GitHubRepositoryCreateOneInput {
        create: GitHubRepositoryCreateInput
        connect: GitHubRepositoryWhereUniqueInput
    }

    type GitHubRepositoryEdge {
        node: GitHubRepository!
        cursor: String!
    }

    enum GitHubRepositoryOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        updatedAtExternal_ASC
        updatedAtExternal_DESC
        hasBranchRules_ASC
        hasBranchRules_DESC
        hasContributingGuidelines_ASC
        hasContributingGuidelines_DESC
        hasPullRequestTemplate_ASC
        hasPullRequestTemplate_DESC
        hasReadMe_ASC
        hasReadMe_DESC
        hasWiki_ASC
        hasWiki_DESC
        isArchived_ASC
        isArchived_DESC
        isDisabled_ASC
        isDisabled_DESC
        isFork_ASC
        isFork_DESC
        isLocked_ASC
        isLocked_DESC
        isPrivate_ASC
        isPrivate_DESC
        description_ASC
        description_DESC
        license_ASC
        license_DESC
        name_ASC
        name_DESC
        primaryLanguage_ASC
        primaryLanguage_DESC
        sshUrl_ASC
        sshUrl_DESC
        url_ASC
        url_DESC
    }

    type GitHubRepositoryPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        updatedAtExternal: DateTime!
        hasBranchRules: Boolean!
        hasContributingGuidelines: Boolean!
        hasPullRequestTemplate: Boolean!
        hasReadMe: Boolean!
        hasWiki: Boolean!
        isArchived: Boolean!
        isDisabled: Boolean!
        isFork: Boolean!
        isLocked: Boolean!
        isPrivate: Boolean!
        description: String!
        license: String
        name: String!
        primaryLanguage: String
        sshUrl: String!
        url: String!
    }

    type GitHubRepositorySubscriptionPayload {
        mutation: MutationType!
        node: GitHubRepository
        updatedFields: [String!]
        previousValues: GitHubRepositoryPreviousValues
    }

    input GitHubRepositorySubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubRepositoryWhereInput
        AND: [GitHubRepositorySubscriptionWhereInput!]
    }

    input GitHubRepositoryUpdateDataInput {
        updatedAtExternal: DateTime
        collaborators: GitHubUserUpdateManyInput
        owner: GitHubUserUpdateOneRequiredInput
        repositoryTopics: GitHubTopicUpdateManyInput
        stargazers: GitHubUserUpdateManyInput
        watchers: GitHubUserUpdateManyInput
        hasBranchRules: Boolean
        hasContributingGuidelines: Boolean
        hasPullRequestTemplate: Boolean
        hasReadMe: Boolean
        hasWiki: Boolean
        isArchived: Boolean
        isDisabled: Boolean
        isFork: Boolean
        isLocked: Boolean
        isPrivate: Boolean
        description: String
        license: String
        name: String
        primaryLanguage: String
        sshUrl: String
        url: String
    }

    input GitHubRepositoryUpdateInput {
        updatedAtExternal: DateTime
        collaborators: GitHubUserUpdateManyInput
        owner: GitHubUserUpdateOneRequiredInput
        repositoryTopics: GitHubTopicUpdateManyInput
        stargazers: GitHubUserUpdateManyInput
        watchers: GitHubUserUpdateManyInput
        hasBranchRules: Boolean
        hasContributingGuidelines: Boolean
        hasPullRequestTemplate: Boolean
        hasReadMe: Boolean
        hasWiki: Boolean
        isArchived: Boolean
        isDisabled: Boolean
        isFork: Boolean
        isLocked: Boolean
        isPrivate: Boolean
        description: String
        license: String
        name: String
        primaryLanguage: String
        sshUrl: String
        url: String
    }

    input GitHubRepositoryUpdateManyMutationInput {
        updatedAtExternal: DateTime
        hasBranchRules: Boolean
        hasContributingGuidelines: Boolean
        hasPullRequestTemplate: Boolean
        hasReadMe: Boolean
        hasWiki: Boolean
        isArchived: Boolean
        isDisabled: Boolean
        isFork: Boolean
        isLocked: Boolean
        isPrivate: Boolean
        description: String
        license: String
        name: String
        primaryLanguage: String
        sshUrl: String
        url: String
    }

    input GitHubRepositoryUpdateOneRequiredInput {
        create: GitHubRepositoryCreateInput
        update: GitHubRepositoryUpdateDataInput
        upsert: GitHubRepositoryUpsertNestedInput
        connect: GitHubRepositoryWhereUniqueInput
    }

    input GitHubRepositoryUpsertNestedInput {
        update: GitHubRepositoryUpdateDataInput!
        create: GitHubRepositoryCreateInput!
    }

    input GitHubRepositoryWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        updatedAtExternal: DateTime
        updatedAtExternal_not: DateTime
        updatedAtExternal_in: [DateTime!]
        updatedAtExternal_not_in: [DateTime!]
        updatedAtExternal_lt: DateTime
        updatedAtExternal_lte: DateTime
        updatedAtExternal_gt: DateTime
        updatedAtExternal_gte: DateTime
        collaborators_some: GitHubUserWhereInput
        owner: GitHubUserWhereInput
        repositoryTopics_some: GitHubTopicWhereInput
        stargazers_some: GitHubUserWhereInput
        watchers_some: GitHubUserWhereInput
        hasBranchRules: Boolean
        hasBranchRules_not: Boolean
        hasContributingGuidelines: Boolean
        hasContributingGuidelines_not: Boolean
        hasPullRequestTemplate: Boolean
        hasPullRequestTemplate_not: Boolean
        hasReadMe: Boolean
        hasReadMe_not: Boolean
        hasWiki: Boolean
        hasWiki_not: Boolean
        isArchived: Boolean
        isArchived_not: Boolean
        isDisabled: Boolean
        isDisabled_not: Boolean
        isFork: Boolean
        isFork_not: Boolean
        isLocked: Boolean
        isLocked_not: Boolean
        isPrivate: Boolean
        isPrivate_not: Boolean
        description: String
        description_not: String
        description_in: [String!]
        description_not_in: [String!]
        description_lt: String
        description_lte: String
        description_gt: String
        description_gte: String
        description_contains: String
        description_not_contains: String
        description_starts_with: String
        description_not_starts_with: String
        description_ends_with: String
        description_not_ends_with: String
        license: String
        license_not: String
        license_in: [String!]
        license_not_in: [String!]
        license_lt: String
        license_lte: String
        license_gt: String
        license_gte: String
        license_contains: String
        license_not_contains: String
        license_starts_with: String
        license_not_starts_with: String
        license_ends_with: String
        license_not_ends_with: String
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        primaryLanguage: String
        primaryLanguage_not: String
        primaryLanguage_in: [String!]
        primaryLanguage_not_in: [String!]
        primaryLanguage_lt: String
        primaryLanguage_lte: String
        primaryLanguage_gt: String
        primaryLanguage_gte: String
        primaryLanguage_contains: String
        primaryLanguage_not_contains: String
        primaryLanguage_starts_with: String
        primaryLanguage_not_starts_with: String
        primaryLanguage_ends_with: String
        primaryLanguage_not_ends_with: String
        sshUrl: String
        sshUrl_not: String
        sshUrl_in: [String!]
        sshUrl_not_in: [String!]
        sshUrl_lt: String
        sshUrl_lte: String
        sshUrl_gt: String
        sshUrl_gte: String
        sshUrl_contains: String
        sshUrl_not_contains: String
        sshUrl_starts_with: String
        sshUrl_not_starts_with: String
        sshUrl_ends_with: String
        sshUrl_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        AND: [GitHubRepositoryWhereInput!]
    }

    input GitHubRepositoryWhereUniqueInput {
        id: ID
    }

    type GitHubReviewRequest {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        pullRequest: GitHubPullRequest!
        requestedReviewer: GitHubUser!
    }

    type GitHubReviewRequestConnection {
        pageInfo: PageInfo!
        edges: [GitHubReviewRequestEdge]!
        aggregate: AggregateGitHubReviewRequest!
    }

    input GitHubReviewRequestCreateInput {
        id: ID
        pullRequest: GitHubPullRequestCreateOneWithoutReviewRequestsInput!
        requestedReviewer: GitHubUserCreateOneInput!
    }

    input GitHubReviewRequestCreateManyWithoutPullRequestInput {
        create: [GitHubReviewRequestCreateWithoutPullRequestInput!]
        connect: [GitHubReviewRequestWhereUniqueInput!]
    }

    input GitHubReviewRequestCreateWithoutPullRequestInput {
        id: ID
        requestedReviewer: GitHubUserCreateOneInput!
    }

    type GitHubReviewRequestEdge {
        node: GitHubReviewRequest!
        cursor: String!
    }

    enum GitHubReviewRequestOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
    }

    type GitHubReviewRequestPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
    }

    input GitHubReviewRequestScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        AND: [GitHubReviewRequestScalarWhereInput!]
        OR: [GitHubReviewRequestScalarWhereInput!]
        NOT: [GitHubReviewRequestScalarWhereInput!]
    }

    type GitHubReviewRequestSubscriptionPayload {
        mutation: MutationType!
        node: GitHubReviewRequest
        updatedFields: [String!]
        previousValues: GitHubReviewRequestPreviousValues
    }

    input GitHubReviewRequestSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubReviewRequestWhereInput
        AND: [GitHubReviewRequestSubscriptionWhereInput!]
    }

    input GitHubReviewRequestUpdateInput {
        pullRequest: GitHubPullRequestUpdateOneRequiredWithoutReviewRequestsInput
        requestedReviewer: GitHubUserUpdateOneRequiredInput
    }

    input GitHubReviewRequestUpdateManyWithoutPullRequestInput {
        create: [GitHubReviewRequestCreateWithoutPullRequestInput!]
        delete: [GitHubReviewRequestWhereUniqueInput!]
        connect: [GitHubReviewRequestWhereUniqueInput!]
        set: [GitHubReviewRequestWhereUniqueInput!]
        disconnect: [GitHubReviewRequestWhereUniqueInput!]
        update: [GitHubReviewRequestUpdateWithWhereUniqueWithoutPullRequestInput!]
        upsert: [GitHubReviewRequestUpsertWithWhereUniqueWithoutPullRequestInput!]
        deleteMany: [GitHubReviewRequestScalarWhereInput!]
    }

    input GitHubReviewRequestUpdateWithoutPullRequestDataInput {
        requestedReviewer: GitHubUserUpdateOneRequiredInput
    }

    input GitHubReviewRequestUpdateWithWhereUniqueWithoutPullRequestInput {
        where: GitHubReviewRequestWhereUniqueInput!
        data: GitHubReviewRequestUpdateWithoutPullRequestDataInput!
    }

    input GitHubReviewRequestUpsertWithWhereUniqueWithoutPullRequestInput {
        where: GitHubReviewRequestWhereUniqueInput!
        update: GitHubReviewRequestUpdateWithoutPullRequestDataInput!
        create: GitHubReviewRequestCreateWithoutPullRequestInput!
    }

    input GitHubReviewRequestWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        pullRequest: GitHubPullRequestWhereInput
        requestedReviewer: GitHubUserWhereInput
        AND: [GitHubReviewRequestWhereInput!]
    }

    input GitHubReviewRequestWhereUniqueInput {
        id: ID
    }

    type GitHubReviewThread {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        comments(
            where: GitHubCommentWhereInput
            orderBy: GitHubCommentOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubComment!]
        pullRequest: GitHubPullRequest!
        repository: GitHubRepository!
        resolvedBy: GitHubUser!
        isResolved: Boolean!
    }

    type GitHubReviewThreadConnection {
        pageInfo: PageInfo!
        edges: [GitHubReviewThreadEdge]!
        aggregate: AggregateGitHubReviewThread!
    }

    input GitHubReviewThreadCreateInput {
        id: ID
        comments: GitHubCommentCreateManyInput
        pullRequest: GitHubPullRequestCreateOneWithoutReviewThreadsInput!
        repository: GitHubRepositoryCreateOneInput!
        resolvedBy: GitHubUserCreateOneInput!
        isResolved: Boolean!
    }

    input GitHubReviewThreadCreateManyWithoutPullRequestInput {
        create: [GitHubReviewThreadCreateWithoutPullRequestInput!]
        connect: [GitHubReviewThreadWhereUniqueInput!]
    }

    input GitHubReviewThreadCreateWithoutPullRequestInput {
        id: ID
        comments: GitHubCommentCreateManyInput
        repository: GitHubRepositoryCreateOneInput!
        resolvedBy: GitHubUserCreateOneInput!
        isResolved: Boolean!
    }

    type GitHubReviewThreadEdge {
        node: GitHubReviewThread!
        cursor: String!
    }

    enum GitHubReviewThreadOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        isResolved_ASC
        isResolved_DESC
    }

    type GitHubReviewThreadPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        isResolved: Boolean!
    }

    input GitHubReviewThreadScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        isResolved: Boolean
        isResolved_not: Boolean
        AND: [GitHubReviewThreadScalarWhereInput!]
        OR: [GitHubReviewThreadScalarWhereInput!]
        NOT: [GitHubReviewThreadScalarWhereInput!]
    }

    type GitHubReviewThreadSubscriptionPayload {
        mutation: MutationType!
        node: GitHubReviewThread
        updatedFields: [String!]
        previousValues: GitHubReviewThreadPreviousValues
    }

    input GitHubReviewThreadSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubReviewThreadWhereInput
        AND: [GitHubReviewThreadSubscriptionWhereInput!]
    }

    input GitHubReviewThreadUpdateInput {
        comments: GitHubCommentUpdateManyInput
        pullRequest: GitHubPullRequestUpdateOneRequiredWithoutReviewThreadsInput
        repository: GitHubRepositoryUpdateOneRequiredInput
        resolvedBy: GitHubUserUpdateOneRequiredInput
        isResolved: Boolean
    }

    input GitHubReviewThreadUpdateManyDataInput {
        isResolved: Boolean
    }

    input GitHubReviewThreadUpdateManyMutationInput {
        isResolved: Boolean
    }

    input GitHubReviewThreadUpdateManyWithoutPullRequestInput {
        create: [GitHubReviewThreadCreateWithoutPullRequestInput!]
        delete: [GitHubReviewThreadWhereUniqueInput!]
        connect: [GitHubReviewThreadWhereUniqueInput!]
        set: [GitHubReviewThreadWhereUniqueInput!]
        disconnect: [GitHubReviewThreadWhereUniqueInput!]
        update: [GitHubReviewThreadUpdateWithWhereUniqueWithoutPullRequestInput!]
        upsert: [GitHubReviewThreadUpsertWithWhereUniqueWithoutPullRequestInput!]
        deleteMany: [GitHubReviewThreadScalarWhereInput!]
        updateMany: [GitHubReviewThreadUpdateManyWithWhereNestedInput!]
    }

    input GitHubReviewThreadUpdateManyWithWhereNestedInput {
        where: GitHubReviewThreadScalarWhereInput!
        data: GitHubReviewThreadUpdateManyDataInput!
    }

    input GitHubReviewThreadUpdateWithoutPullRequestDataInput {
        comments: GitHubCommentUpdateManyInput
        repository: GitHubRepositoryUpdateOneRequiredInput
        resolvedBy: GitHubUserUpdateOneRequiredInput
        isResolved: Boolean
    }

    input GitHubReviewThreadUpdateWithWhereUniqueWithoutPullRequestInput {
        where: GitHubReviewThreadWhereUniqueInput!
        data: GitHubReviewThreadUpdateWithoutPullRequestDataInput!
    }

    input GitHubReviewThreadUpsertWithWhereUniqueWithoutPullRequestInput {
        where: GitHubReviewThreadWhereUniqueInput!
        update: GitHubReviewThreadUpdateWithoutPullRequestDataInput!
        create: GitHubReviewThreadCreateWithoutPullRequestInput!
    }

    input GitHubReviewThreadWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        comments_some: GitHubCommentWhereInput
        pullRequest: GitHubPullRequestWhereInput
        repository: GitHubRepositoryWhereInput
        resolvedBy: GitHubUserWhereInput
        isResolved: Boolean
        isResolved_not: Boolean
        AND: [GitHubReviewThreadWhereInput!]
    }

    input GitHubReviewThreadWhereUniqueInput {
        id: ID
    }

    type GitHubTopic {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        relatedTopics(
            where: GitHubTopicWhereInput
            orderBy: GitHubTopicOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubTopic!]
        stargazers(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser!]
        name: String!
    }

    type GitHubTopicConnection {
        pageInfo: PageInfo!
        edges: [GitHubTopicEdge]!
        aggregate: AggregateGitHubTopic!
    }

    input GitHubTopicCreateInput {
        id: ID
        relatedTopics: GitHubTopicCreateManyWithoutRelatedTopicsInput
        stargazers: GitHubUserCreateManyInput
        name: String!
    }

    input GitHubTopicCreateManyInput {
        create: [GitHubTopicCreateInput!]
        connect: [GitHubTopicWhereUniqueInput!]
    }

    input GitHubTopicCreateManyWithoutRelatedTopicsInput {
        create: [GitHubTopicCreateWithoutRelatedTopicsInput!]
        connect: [GitHubTopicWhereUniqueInput!]
    }

    input GitHubTopicCreateWithoutRelatedTopicsInput {
        id: ID
        stargazers: GitHubUserCreateManyInput
        name: String!
    }

    type GitHubTopicEdge {
        node: GitHubTopic!
        cursor: String!
    }

    enum GitHubTopicOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        name_ASC
        name_DESC
    }

    type GitHubTopicPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        name: String!
    }

    input GitHubTopicScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        AND: [GitHubTopicScalarWhereInput!]
        OR: [GitHubTopicScalarWhereInput!]
        NOT: [GitHubTopicScalarWhereInput!]
    }

    type GitHubTopicSubscriptionPayload {
        mutation: MutationType!
        node: GitHubTopic
        updatedFields: [String!]
        previousValues: GitHubTopicPreviousValues
    }

    input GitHubTopicSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubTopicWhereInput
        AND: [GitHubTopicSubscriptionWhereInput!]
    }

    input GitHubTopicUpdateDataInput {
        relatedTopics: GitHubTopicUpdateManyWithoutRelatedTopicsInput
        stargazers: GitHubUserUpdateManyInput
        name: String
    }

    input GitHubTopicUpdateInput {
        relatedTopics: GitHubTopicUpdateManyWithoutRelatedTopicsInput
        stargazers: GitHubUserUpdateManyInput
        name: String
    }

    input GitHubTopicUpdateManyDataInput {
        name: String
    }

    input GitHubTopicUpdateManyInput {
        create: [GitHubTopicCreateInput!]
        update: [GitHubTopicUpdateWithWhereUniqueNestedInput!]
        upsert: [GitHubTopicUpsertWithWhereUniqueNestedInput!]
        delete: [GitHubTopicWhereUniqueInput!]
        connect: [GitHubTopicWhereUniqueInput!]
        set: [GitHubTopicWhereUniqueInput!]
        disconnect: [GitHubTopicWhereUniqueInput!]
        deleteMany: [GitHubTopicScalarWhereInput!]
        updateMany: [GitHubTopicUpdateManyWithWhereNestedInput!]
    }

    input GitHubTopicUpdateManyMutationInput {
        name: String
    }

    input GitHubTopicUpdateManyWithoutRelatedTopicsInput {
        create: [GitHubTopicCreateWithoutRelatedTopicsInput!]
        delete: [GitHubTopicWhereUniqueInput!]
        connect: [GitHubTopicWhereUniqueInput!]
        set: [GitHubTopicWhereUniqueInput!]
        disconnect: [GitHubTopicWhereUniqueInput!]
        update: [GitHubTopicUpdateWithWhereUniqueWithoutRelatedTopicsInput!]
        upsert: [GitHubTopicUpsertWithWhereUniqueWithoutRelatedTopicsInput!]
        deleteMany: [GitHubTopicScalarWhereInput!]
        updateMany: [GitHubTopicUpdateManyWithWhereNestedInput!]
    }

    input GitHubTopicUpdateManyWithWhereNestedInput {
        where: GitHubTopicScalarWhereInput!
        data: GitHubTopicUpdateManyDataInput!
    }

    input GitHubTopicUpdateWithoutRelatedTopicsDataInput {
        stargazers: GitHubUserUpdateManyInput
        name: String
    }

    input GitHubTopicUpdateWithWhereUniqueNestedInput {
        where: GitHubTopicWhereUniqueInput!
        data: GitHubTopicUpdateDataInput!
    }

    input GitHubTopicUpdateWithWhereUniqueWithoutRelatedTopicsInput {
        where: GitHubTopicWhereUniqueInput!
        data: GitHubTopicUpdateWithoutRelatedTopicsDataInput!
    }

    input GitHubTopicUpsertWithWhereUniqueNestedInput {
        where: GitHubTopicWhereUniqueInput!
        update: GitHubTopicUpdateDataInput!
        create: GitHubTopicCreateInput!
    }

    input GitHubTopicUpsertWithWhereUniqueWithoutRelatedTopicsInput {
        where: GitHubTopicWhereUniqueInput!
        update: GitHubTopicUpdateWithoutRelatedTopicsDataInput!
        create: GitHubTopicCreateWithoutRelatedTopicsInput!
    }

    input GitHubTopicWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        relatedTopics_some: GitHubTopicWhereInput
        stargazers_some: GitHubUserWhereInput
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        AND: [GitHubTopicWhereInput!]
    }

    input GitHubTopicWhereUniqueInput {
        id: ID
    }

    type GitHubUser {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        createdAtExternal: DateTime!
        followers(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser!]
        following(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser!]
        issueComments(
            where: GitHubCommentWhereInput
            orderBy: GitHubCommentOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubComment!]
        issues(
            where: GitHubIssueWhereInput
            orderBy: GitHubIssueOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubIssue!]
        pullRequests(
            where: GitHubPullRequestWhereInput
            orderBy: GitHubPullRequestOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubPullRequest!]
        isBountyHunter: Boolean!
        isCampusExpert: Boolean!
        isDeveloperProgramMember: Boolean!
        isEmployee: Boolean!
        isHireable: Boolean!
        isSiteAdmin: Boolean!
        isViewer: Boolean!
        url: String!
        name: String!
        login: String!
        avatarUrl: String!
        bio: String
        company: String
        email: String
    }

    type GitHubUserConnection {
        pageInfo: PageInfo!
        edges: [GitHubUserEdge]!
        aggregate: AggregateGitHubUser!
    }

    input GitHubUserCreateInput {
        id: ID
        createdAtExternal: DateTime!
        followers: GitHubUserCreateManyWithoutFollowersInput
        following: GitHubUserCreateManyWithoutFollowingInput
        issueComments: GitHubCommentCreateManyWithoutAuthorInput
        issues: GitHubIssueCreateManyInput
        pullRequests: GitHubPullRequestCreateManyInput
        isBountyHunter: Boolean!
        isCampusExpert: Boolean!
        isDeveloperProgramMember: Boolean!
        isEmployee: Boolean!
        isHireable: Boolean!
        isSiteAdmin: Boolean!
        isViewer: Boolean!
        url: String!
        name: String!
        login: String!
        avatarUrl: String!
        bio: String
        company: String
        email: String
    }

    input GitHubUserCreateManyInput {
        create: [GitHubUserCreateInput!]
        connect: [GitHubUserWhereUniqueInput!]
    }

    input GitHubUserCreateManyWithoutFollowersInput {
        create: [GitHubUserCreateWithoutFollowersInput!]
        connect: [GitHubUserWhereUniqueInput!]
    }

    input GitHubUserCreateManyWithoutFollowingInput {
        create: [GitHubUserCreateWithoutFollowingInput!]
        connect: [GitHubUserWhereUniqueInput!]
    }

    input GitHubUserCreateOneInput {
        create: GitHubUserCreateInput
        connect: GitHubUserWhereUniqueInput
    }

    input GitHubUserCreateOneWithoutIssueCommentsInput {
        create: GitHubUserCreateWithoutIssueCommentsInput
        connect: GitHubUserWhereUniqueInput
    }

    input GitHubUserCreateWithoutFollowersInput {
        id: ID
        createdAtExternal: DateTime!
        following: GitHubUserCreateManyWithoutFollowingInput
        issueComments: GitHubCommentCreateManyWithoutAuthorInput
        issues: GitHubIssueCreateManyInput
        pullRequests: GitHubPullRequestCreateManyInput
        isBountyHunter: Boolean!
        isCampusExpert: Boolean!
        isDeveloperProgramMember: Boolean!
        isEmployee: Boolean!
        isHireable: Boolean!
        isSiteAdmin: Boolean!
        isViewer: Boolean!
        url: String!
        name: String!
        login: String!
        avatarUrl: String!
        bio: String
        company: String
        email: String
    }

    input GitHubUserCreateWithoutFollowingInput {
        id: ID
        createdAtExternal: DateTime!
        followers: GitHubUserCreateManyWithoutFollowersInput
        issueComments: GitHubCommentCreateManyWithoutAuthorInput
        issues: GitHubIssueCreateManyInput
        pullRequests: GitHubPullRequestCreateManyInput
        isBountyHunter: Boolean!
        isCampusExpert: Boolean!
        isDeveloperProgramMember: Boolean!
        isEmployee: Boolean!
        isHireable: Boolean!
        isSiteAdmin: Boolean!
        isViewer: Boolean!
        url: String!
        name: String!
        login: String!
        avatarUrl: String!
        bio: String
        company: String
        email: String
    }

    input GitHubUserCreateWithoutIssueCommentsInput {
        id: ID
        createdAtExternal: DateTime!
        followers: GitHubUserCreateManyWithoutFollowersInput
        following: GitHubUserCreateManyWithoutFollowingInput
        issues: GitHubIssueCreateManyInput
        pullRequests: GitHubPullRequestCreateManyInput
        isBountyHunter: Boolean!
        isCampusExpert: Boolean!
        isDeveloperProgramMember: Boolean!
        isEmployee: Boolean!
        isHireable: Boolean!
        isSiteAdmin: Boolean!
        isViewer: Boolean!
        url: String!
        name: String!
        login: String!
        avatarUrl: String!
        bio: String
        company: String
        email: String
    }

    type GitHubUserEdge {
        node: GitHubUser!
        cursor: String!
    }

    enum GitHubUserOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        createdAtExternal_ASC
        createdAtExternal_DESC
        isBountyHunter_ASC
        isBountyHunter_DESC
        isCampusExpert_ASC
        isCampusExpert_DESC
        isDeveloperProgramMember_ASC
        isDeveloperProgramMember_DESC
        isEmployee_ASC
        isEmployee_DESC
        isHireable_ASC
        isHireable_DESC
        isSiteAdmin_ASC
        isSiteAdmin_DESC
        isViewer_ASC
        isViewer_DESC
        url_ASC
        url_DESC
        name_ASC
        name_DESC
        login_ASC
        login_DESC
        avatarUrl_ASC
        avatarUrl_DESC
        bio_ASC
        bio_DESC
        company_ASC
        company_DESC
        email_ASC
        email_DESC
    }

    type GitHubUserPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        createdAtExternal: DateTime!
        isBountyHunter: Boolean!
        isCampusExpert: Boolean!
        isDeveloperProgramMember: Boolean!
        isEmployee: Boolean!
        isHireable: Boolean!
        isSiteAdmin: Boolean!
        isViewer: Boolean!
        url: String!
        name: String!
        login: String!
        avatarUrl: String!
        bio: String
        company: String
        email: String
    }

    input GitHubUserScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        isBountyHunter: Boolean
        isBountyHunter_not: Boolean
        isCampusExpert: Boolean
        isCampusExpert_not: Boolean
        isDeveloperProgramMember: Boolean
        isDeveloperProgramMember_not: Boolean
        isEmployee: Boolean
        isEmployee_not: Boolean
        isHireable: Boolean
        isHireable_not: Boolean
        isSiteAdmin: Boolean
        isSiteAdmin_not: Boolean
        isViewer: Boolean
        isViewer_not: Boolean
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        login: String
        login_not: String
        login_in: [String!]
        login_not_in: [String!]
        login_lt: String
        login_lte: String
        login_gt: String
        login_gte: String
        login_contains: String
        login_not_contains: String
        login_starts_with: String
        login_not_starts_with: String
        login_ends_with: String
        login_not_ends_with: String
        avatarUrl: String
        avatarUrl_not: String
        avatarUrl_in: [String!]
        avatarUrl_not_in: [String!]
        avatarUrl_lt: String
        avatarUrl_lte: String
        avatarUrl_gt: String
        avatarUrl_gte: String
        avatarUrl_contains: String
        avatarUrl_not_contains: String
        avatarUrl_starts_with: String
        avatarUrl_not_starts_with: String
        avatarUrl_ends_with: String
        avatarUrl_not_ends_with: String
        bio: String
        bio_not: String
        bio_in: [String!]
        bio_not_in: [String!]
        bio_lt: String
        bio_lte: String
        bio_gt: String
        bio_gte: String
        bio_contains: String
        bio_not_contains: String
        bio_starts_with: String
        bio_not_starts_with: String
        bio_ends_with: String
        bio_not_ends_with: String
        company: String
        company_not: String
        company_in: [String!]
        company_not_in: [String!]
        company_lt: String
        company_lte: String
        company_gt: String
        company_gte: String
        company_contains: String
        company_not_contains: String
        company_starts_with: String
        company_not_starts_with: String
        company_ends_with: String
        company_not_ends_with: String
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        AND: [GitHubUserScalarWhereInput!]
        OR: [GitHubUserScalarWhereInput!]
        NOT: [GitHubUserScalarWhereInput!]
    }

    type GitHubUserSubscriptionPayload {
        mutation: MutationType!
        node: GitHubUser
        updatedFields: [String!]
        previousValues: GitHubUserPreviousValues
    }

    input GitHubUserSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubUserWhereInput
        AND: [GitHubUserSubscriptionWhereInput!]
    }

    input GitHubUserUpdateDataInput {
        createdAtExternal: DateTime
        followers: GitHubUserUpdateManyWithoutFollowersInput
        following: GitHubUserUpdateManyWithoutFollowingInput
        issueComments: GitHubCommentUpdateManyWithoutAuthorInput
        issues: GitHubIssueUpdateManyInput
        pullRequests: GitHubPullRequestUpdateManyInput
        isBountyHunter: Boolean
        isCampusExpert: Boolean
        isDeveloperProgramMember: Boolean
        isEmployee: Boolean
        isHireable: Boolean
        isSiteAdmin: Boolean
        isViewer: Boolean
        url: String
        name: String
        login: String
        avatarUrl: String
        bio: String
        company: String
        email: String
    }

    input GitHubUserUpdateInput {
        createdAtExternal: DateTime
        followers: GitHubUserUpdateManyWithoutFollowersInput
        following: GitHubUserUpdateManyWithoutFollowingInput
        issueComments: GitHubCommentUpdateManyWithoutAuthorInput
        issues: GitHubIssueUpdateManyInput
        pullRequests: GitHubPullRequestUpdateManyInput
        isBountyHunter: Boolean
        isCampusExpert: Boolean
        isDeveloperProgramMember: Boolean
        isEmployee: Boolean
        isHireable: Boolean
        isSiteAdmin: Boolean
        isViewer: Boolean
        url: String
        name: String
        login: String
        avatarUrl: String
        bio: String
        company: String
        email: String
    }

    input GitHubUserUpdateManyDataInput {
        createdAtExternal: DateTime
        isBountyHunter: Boolean
        isCampusExpert: Boolean
        isDeveloperProgramMember: Boolean
        isEmployee: Boolean
        isHireable: Boolean
        isSiteAdmin: Boolean
        isViewer: Boolean
        url: String
        name: String
        login: String
        avatarUrl: String
        bio: String
        company: String
        email: String
    }

    input GitHubUserUpdateManyInput {
        create: [GitHubUserCreateInput!]
        update: [GitHubUserUpdateWithWhereUniqueNestedInput!]
        upsert: [GitHubUserUpsertWithWhereUniqueNestedInput!]
        delete: [GitHubUserWhereUniqueInput!]
        connect: [GitHubUserWhereUniqueInput!]
        set: [GitHubUserWhereUniqueInput!]
        disconnect: [GitHubUserWhereUniqueInput!]
        deleteMany: [GitHubUserScalarWhereInput!]
        updateMany: [GitHubUserUpdateManyWithWhereNestedInput!]
    }

    input GitHubUserUpdateManyMutationInput {
        createdAtExternal: DateTime
        isBountyHunter: Boolean
        isCampusExpert: Boolean
        isDeveloperProgramMember: Boolean
        isEmployee: Boolean
        isHireable: Boolean
        isSiteAdmin: Boolean
        isViewer: Boolean
        url: String
        name: String
        login: String
        avatarUrl: String
        bio: String
        company: String
        email: String
    }

    input GitHubUserUpdateManyWithoutFollowersInput {
        create: [GitHubUserCreateWithoutFollowersInput!]
        delete: [GitHubUserWhereUniqueInput!]
        connect: [GitHubUserWhereUniqueInput!]
        set: [GitHubUserWhereUniqueInput!]
        disconnect: [GitHubUserWhereUniqueInput!]
        update: [GitHubUserUpdateWithWhereUniqueWithoutFollowersInput!]
        upsert: [GitHubUserUpsertWithWhereUniqueWithoutFollowersInput!]
        deleteMany: [GitHubUserScalarWhereInput!]
        updateMany: [GitHubUserUpdateManyWithWhereNestedInput!]
    }

    input GitHubUserUpdateManyWithoutFollowingInput {
        create: [GitHubUserCreateWithoutFollowingInput!]
        delete: [GitHubUserWhereUniqueInput!]
        connect: [GitHubUserWhereUniqueInput!]
        set: [GitHubUserWhereUniqueInput!]
        disconnect: [GitHubUserWhereUniqueInput!]
        update: [GitHubUserUpdateWithWhereUniqueWithoutFollowingInput!]
        upsert: [GitHubUserUpsertWithWhereUniqueWithoutFollowingInput!]
        deleteMany: [GitHubUserScalarWhereInput!]
        updateMany: [GitHubUserUpdateManyWithWhereNestedInput!]
    }

    input GitHubUserUpdateManyWithWhereNestedInput {
        where: GitHubUserScalarWhereInput!
        data: GitHubUserUpdateManyDataInput!
    }

    input GitHubUserUpdateOneInput {
        create: GitHubUserCreateInput
        update: GitHubUserUpdateDataInput
        upsert: GitHubUserUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
        connect: GitHubUserWhereUniqueInput
    }

    input GitHubUserUpdateOneRequiredInput {
        create: GitHubUserCreateInput
        update: GitHubUserUpdateDataInput
        upsert: GitHubUserUpsertNestedInput
        connect: GitHubUserWhereUniqueInput
    }

    input GitHubUserUpdateOneRequiredWithoutIssueCommentsInput {
        create: GitHubUserCreateWithoutIssueCommentsInput
        update: GitHubUserUpdateWithoutIssueCommentsDataInput
        upsert: GitHubUserUpsertWithoutIssueCommentsInput
        connect: GitHubUserWhereUniqueInput
    }

    input GitHubUserUpdateWithoutFollowersDataInput {
        createdAtExternal: DateTime
        following: GitHubUserUpdateManyWithoutFollowingInput
        issueComments: GitHubCommentUpdateManyWithoutAuthorInput
        issues: GitHubIssueUpdateManyInput
        pullRequests: GitHubPullRequestUpdateManyInput
        isBountyHunter: Boolean
        isCampusExpert: Boolean
        isDeveloperProgramMember: Boolean
        isEmployee: Boolean
        isHireable: Boolean
        isSiteAdmin: Boolean
        isViewer: Boolean
        url: String
        name: String
        login: String
        avatarUrl: String
        bio: String
        company: String
        email: String
    }

    input GitHubUserUpdateWithoutFollowingDataInput {
        createdAtExternal: DateTime
        followers: GitHubUserUpdateManyWithoutFollowersInput
        issueComments: GitHubCommentUpdateManyWithoutAuthorInput
        issues: GitHubIssueUpdateManyInput
        pullRequests: GitHubPullRequestUpdateManyInput
        isBountyHunter: Boolean
        isCampusExpert: Boolean
        isDeveloperProgramMember: Boolean
        isEmployee: Boolean
        isHireable: Boolean
        isSiteAdmin: Boolean
        isViewer: Boolean
        url: String
        name: String
        login: String
        avatarUrl: String
        bio: String
        company: String
        email: String
    }

    input GitHubUserUpdateWithoutIssueCommentsDataInput {
        createdAtExternal: DateTime
        followers: GitHubUserUpdateManyWithoutFollowersInput
        following: GitHubUserUpdateManyWithoutFollowingInput
        issues: GitHubIssueUpdateManyInput
        pullRequests: GitHubPullRequestUpdateManyInput
        isBountyHunter: Boolean
        isCampusExpert: Boolean
        isDeveloperProgramMember: Boolean
        isEmployee: Boolean
        isHireable: Boolean
        isSiteAdmin: Boolean
        isViewer: Boolean
        url: String
        name: String
        login: String
        avatarUrl: String
        bio: String
        company: String
        email: String
    }

    input GitHubUserUpdateWithWhereUniqueNestedInput {
        where: GitHubUserWhereUniqueInput!
        data: GitHubUserUpdateDataInput!
    }

    input GitHubUserUpdateWithWhereUniqueWithoutFollowersInput {
        where: GitHubUserWhereUniqueInput!
        data: GitHubUserUpdateWithoutFollowersDataInput!
    }

    input GitHubUserUpdateWithWhereUniqueWithoutFollowingInput {
        where: GitHubUserWhereUniqueInput!
        data: GitHubUserUpdateWithoutFollowingDataInput!
    }

    input GitHubUserUpsertNestedInput {
        update: GitHubUserUpdateDataInput!
        create: GitHubUserCreateInput!
    }

    input GitHubUserUpsertWithoutIssueCommentsInput {
        update: GitHubUserUpdateWithoutIssueCommentsDataInput!
        create: GitHubUserCreateWithoutIssueCommentsInput!
    }

    input GitHubUserUpsertWithWhereUniqueNestedInput {
        where: GitHubUserWhereUniqueInput!
        update: GitHubUserUpdateDataInput!
        create: GitHubUserCreateInput!
    }

    input GitHubUserUpsertWithWhereUniqueWithoutFollowersInput {
        where: GitHubUserWhereUniqueInput!
        update: GitHubUserUpdateWithoutFollowersDataInput!
        create: GitHubUserCreateWithoutFollowersInput!
    }

    input GitHubUserUpsertWithWhereUniqueWithoutFollowingInput {
        where: GitHubUserWhereUniqueInput!
        update: GitHubUserUpdateWithoutFollowingDataInput!
        create: GitHubUserCreateWithoutFollowingInput!
    }

    input GitHubUserWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        followers_some: GitHubUserWhereInput
        following_some: GitHubUserWhereInput
        issueComments_some: GitHubCommentWhereInput
        issues_some: GitHubIssueWhereInput
        pullRequests_some: GitHubPullRequestWhereInput
        isBountyHunter: Boolean
        isBountyHunter_not: Boolean
        isCampusExpert: Boolean
        isCampusExpert_not: Boolean
        isDeveloperProgramMember: Boolean
        isDeveloperProgramMember_not: Boolean
        isEmployee: Boolean
        isEmployee_not: Boolean
        isHireable: Boolean
        isHireable_not: Boolean
        isSiteAdmin: Boolean
        isSiteAdmin_not: Boolean
        isViewer: Boolean
        isViewer_not: Boolean
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        login: String
        login_not: String
        login_in: [String!]
        login_not_in: [String!]
        login_lt: String
        login_lte: String
        login_gt: String
        login_gte: String
        login_contains: String
        login_not_contains: String
        login_starts_with: String
        login_not_starts_with: String
        login_ends_with: String
        login_not_ends_with: String
        avatarUrl: String
        avatarUrl_not: String
        avatarUrl_in: [String!]
        avatarUrl_not_in: [String!]
        avatarUrl_lt: String
        avatarUrl_lte: String
        avatarUrl_gt: String
        avatarUrl_gte: String
        avatarUrl_contains: String
        avatarUrl_not_contains: String
        avatarUrl_starts_with: String
        avatarUrl_not_starts_with: String
        avatarUrl_ends_with: String
        avatarUrl_not_ends_with: String
        bio: String
        bio_not: String
        bio_in: [String!]
        bio_not_in: [String!]
        bio_lt: String
        bio_lte: String
        bio_gt: String
        bio_gte: String
        bio_contains: String
        bio_not_contains: String
        bio_starts_with: String
        bio_not_starts_with: String
        bio_ends_with: String
        bio_not_ends_with: String
        company: String
        company_not: String
        company_in: [String!]
        company_not_in: [String!]
        company_lt: String
        company_lte: String
        company_gt: String
        company_gte: String
        company_contains: String
        company_not_contains: String
        company_starts_with: String
        company_not_starts_with: String
        company_ends_with: String
        company_not_ends_with: String
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        AND: [GitHubUserWhereInput!]
    }

    input GitHubUserWhereUniqueInput {
        id: ID
    }

    type GitHubWebhookEvent {
        id: ID!
        createdAt: DateTime!
        repository: Repository!
        eventType: String!
        action: String
        sender: String!
    }

    type GitHubWebhookEventConnection {
        pageInfo: PageInfo!
        edges: [GitHubWebhookEventEdge]!
        aggregate: AggregateGitHubWebhookEvent!
    }

    input GitHubWebhookEventCreateInput {
        id: ID
        repository: RepositoryCreateOneWithoutWebhookEventsInput!
        eventType: String!
        action: String
        sender: String!
    }

    input GitHubWebhookEventCreateManyWithoutRepositoryInput {
        create: [GitHubWebhookEventCreateWithoutRepositoryInput!]
        connect: [GitHubWebhookEventWhereUniqueInput!]
    }

    input GitHubWebhookEventCreateWithoutRepositoryInput {
        id: ID
        eventType: String!
        action: String
        sender: String!
    }

    type GitHubWebhookEventEdge {
        node: GitHubWebhookEvent!
        cursor: String!
    }

    enum GitHubWebhookEventOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        eventType_ASC
        eventType_DESC
        action_ASC
        action_DESC
        sender_ASC
        sender_DESC
    }

    type GitHubWebhookEventPreviousValues {
        id: ID!
        createdAt: DateTime!
        eventType: String!
        action: String
        sender: String!
    }

    input GitHubWebhookEventScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        eventType: String
        eventType_not: String
        eventType_in: [String!]
        eventType_not_in: [String!]
        eventType_lt: String
        eventType_lte: String
        eventType_gt: String
        eventType_gte: String
        eventType_contains: String
        eventType_not_contains: String
        eventType_starts_with: String
        eventType_not_starts_with: String
        eventType_ends_with: String
        eventType_not_ends_with: String
        action: String
        action_not: String
        action_in: [String!]
        action_not_in: [String!]
        action_lt: String
        action_lte: String
        action_gt: String
        action_gte: String
        action_contains: String
        action_not_contains: String
        action_starts_with: String
        action_not_starts_with: String
        action_ends_with: String
        action_not_ends_with: String
        sender: String
        sender_not: String
        sender_in: [String!]
        sender_not_in: [String!]
        sender_lt: String
        sender_lte: String
        sender_gt: String
        sender_gte: String
        sender_contains: String
        sender_not_contains: String
        sender_starts_with: String
        sender_not_starts_with: String
        sender_ends_with: String
        sender_not_ends_with: String
        AND: [GitHubWebhookEventScalarWhereInput!]
        OR: [GitHubWebhookEventScalarWhereInput!]
        NOT: [GitHubWebhookEventScalarWhereInput!]
    }

    type GitHubWebhookEventSubscriptionPayload {
        mutation: MutationType!
        node: GitHubWebhookEvent
        updatedFields: [String!]
        previousValues: GitHubWebhookEventPreviousValues
    }

    input GitHubWebhookEventSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: GitHubWebhookEventWhereInput
        AND: [GitHubWebhookEventSubscriptionWhereInput!]
    }

    input GitHubWebhookEventUpdateInput {
        repository: RepositoryUpdateOneRequiredWithoutWebhookEventsInput
        eventType: String
        action: String
        sender: String
    }

    input GitHubWebhookEventUpdateManyDataInput {
        eventType: String
        action: String
        sender: String
    }

    input GitHubWebhookEventUpdateManyMutationInput {
        eventType: String
        action: String
        sender: String
    }

    input GitHubWebhookEventUpdateManyWithoutRepositoryInput {
        create: [GitHubWebhookEventCreateWithoutRepositoryInput!]
        delete: [GitHubWebhookEventWhereUniqueInput!]
        connect: [GitHubWebhookEventWhereUniqueInput!]
        set: [GitHubWebhookEventWhereUniqueInput!]
        disconnect: [GitHubWebhookEventWhereUniqueInput!]
        update: [GitHubWebhookEventUpdateWithWhereUniqueWithoutRepositoryInput!]
        upsert: [GitHubWebhookEventUpsertWithWhereUniqueWithoutRepositoryInput!]
        deleteMany: [GitHubWebhookEventScalarWhereInput!]
        updateMany: [GitHubWebhookEventUpdateManyWithWhereNestedInput!]
    }

    input GitHubWebhookEventUpdateManyWithWhereNestedInput {
        where: GitHubWebhookEventScalarWhereInput!
        data: GitHubWebhookEventUpdateManyDataInput!
    }

    input GitHubWebhookEventUpdateWithoutRepositoryDataInput {
        eventType: String
        action: String
        sender: String
    }

    input GitHubWebhookEventUpdateWithWhereUniqueWithoutRepositoryInput {
        where: GitHubWebhookEventWhereUniqueInput!
        data: GitHubWebhookEventUpdateWithoutRepositoryDataInput!
    }

    input GitHubWebhookEventUpsertWithWhereUniqueWithoutRepositoryInput {
        where: GitHubWebhookEventWhereUniqueInput!
        update: GitHubWebhookEventUpdateWithoutRepositoryDataInput!
        create: GitHubWebhookEventCreateWithoutRepositoryInput!
    }

    input GitHubWebhookEventWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        repository: RepositoryWhereInput
        eventType: String
        eventType_not: String
        eventType_in: [String!]
        eventType_not_in: [String!]
        eventType_lt: String
        eventType_lte: String
        eventType_gt: String
        eventType_gte: String
        eventType_contains: String
        eventType_not_contains: String
        eventType_starts_with: String
        eventType_not_starts_with: String
        eventType_ends_with: String
        eventType_not_ends_with: String
        action: String
        action_not: String
        action_in: [String!]
        action_not_in: [String!]
        action_lt: String
        action_lte: String
        action_gt: String
        action_gte: String
        action_contains: String
        action_not_contains: String
        action_starts_with: String
        action_not_starts_with: String
        action_ends_with: String
        action_not_ends_with: String
        sender: String
        sender_not: String
        sender_in: [String!]
        sender_not_in: [String!]
        sender_lt: String
        sender_lte: String
        sender_gt: String
        sender_gte: String
        sender_contains: String
        sender_not_contains: String
        sender_starts_with: String
        sender_not_starts_with: String
        sender_ends_with: String
        sender_not_ends_with: String
        AND: [GitHubWebhookEventWhereInput!]
    }

    input GitHubWebhookEventWhereUniqueInput {
        id: ID
    }

    scalar Long

    type Mutation {
        createAppKey(data: AppKeyCreateInput!): AppKey!
        updateAppKey(
            data: AppKeyUpdateInput!
            where: AppKeyWhereUniqueInput!
        ): AppKey
        updateManyAppKeys(
            data: AppKeyUpdateManyMutationInput!
            where: AppKeyWhereInput
        ): BatchPayload!
        upsertAppKey(
            where: AppKeyWhereUniqueInput!
            create: AppKeyCreateInput!
            update: AppKeyUpdateInput!
        ): AppKey!
        deleteAppKey(where: AppKeyWhereUniqueInput!): AppKey
        deleteManyAppKeys(where: AppKeyWhereInput): BatchPayload!
        createGame(data: GameCreateInput!): Game!
        updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
        updateManyGames(
            data: GameUpdateManyMutationInput!
            where: GameWhereInput
        ): BatchPayload!
        upsertGame(
            where: GameWhereUniqueInput!
            create: GameCreateInput!
            update: GameUpdateInput!
        ): Game!
        deleteGame(where: GameWhereUniqueInput!): Game
        deleteManyGames(where: GameWhereInput): BatchPayload!
        createGitHubBranch(data: GitHubBranchCreateInput!): GitHubBranch!
        updateGitHubBranch(
            data: GitHubBranchUpdateInput!
            where: GitHubBranchWhereUniqueInput!
        ): GitHubBranch
        updateManyGitHubBranches(
            data: GitHubBranchUpdateManyMutationInput!
            where: GitHubBranchWhereInput
        ): BatchPayload!
        upsertGitHubBranch(
            where: GitHubBranchWhereUniqueInput!
            create: GitHubBranchCreateInput!
            update: GitHubBranchUpdateInput!
        ): GitHubBranch!
        deleteGitHubBranch(where: GitHubBranchWhereUniqueInput!): GitHubBranch
        deleteManyGitHubBranches(where: GitHubBranchWhereInput): BatchPayload!
        createGitHubComment(data: GitHubCommentCreateInput!): GitHubComment!
        updateGitHubComment(
            data: GitHubCommentUpdateInput!
            where: GitHubCommentWhereUniqueInput!
        ): GitHubComment
        updateManyGitHubComments(
            data: GitHubCommentUpdateManyMutationInput!
            where: GitHubCommentWhereInput
        ): BatchPayload!
        upsertGitHubComment(
            where: GitHubCommentWhereUniqueInput!
            create: GitHubCommentCreateInput!
            update: GitHubCommentUpdateInput!
        ): GitHubComment!
        deleteGitHubComment(
            where: GitHubCommentWhereUniqueInput!
        ): GitHubComment
        deleteManyGitHubComments(where: GitHubCommentWhereInput): BatchPayload!
        createGitHubCommit(data: GitHubCommitCreateInput!): GitHubCommit!
        updateGitHubCommit(
            data: GitHubCommitUpdateInput!
            where: GitHubCommitWhereUniqueInput!
        ): GitHubCommit
        updateManyGitHubCommits(
            data: GitHubCommitUpdateManyMutationInput!
            where: GitHubCommitWhereInput
        ): BatchPayload!
        upsertGitHubCommit(
            where: GitHubCommitWhereUniqueInput!
            create: GitHubCommitCreateInput!
            update: GitHubCommitUpdateInput!
        ): GitHubCommit!
        deleteGitHubCommit(where: GitHubCommitWhereUniqueInput!): GitHubCommit
        deleteManyGitHubCommits(where: GitHubCommitWhereInput): BatchPayload!
        createGitHubFileDiff(data: GitHubFileDiffCreateInput!): GitHubFileDiff!
        updateGitHubFileDiff(
            data: GitHubFileDiffUpdateInput!
            where: GitHubFileDiffWhereUniqueInput!
        ): GitHubFileDiff
        updateManyGitHubFileDiffs(
            data: GitHubFileDiffUpdateManyMutationInput!
            where: GitHubFileDiffWhereInput
        ): BatchPayload!
        upsertGitHubFileDiff(
            where: GitHubFileDiffWhereUniqueInput!
            create: GitHubFileDiffCreateInput!
            update: GitHubFileDiffUpdateInput!
        ): GitHubFileDiff!
        deleteGitHubFileDiff(
            where: GitHubFileDiffWhereUniqueInput!
        ): GitHubFileDiff
        deleteManyGitHubFileDiffs(
            where: GitHubFileDiffWhereInput
        ): BatchPayload!
        createGitHubIssue(data: GitHubIssueCreateInput!): GitHubIssue!
        updateGitHubIssue(
            data: GitHubIssueUpdateInput!
            where: GitHubIssueWhereUniqueInput!
        ): GitHubIssue
        updateManyGitHubIssues(
            data: GitHubIssueUpdateManyMutationInput!
            where: GitHubIssueWhereInput
        ): BatchPayload!
        upsertGitHubIssue(
            where: GitHubIssueWhereUniqueInput!
            create: GitHubIssueCreateInput!
            update: GitHubIssueUpdateInput!
        ): GitHubIssue!
        deleteGitHubIssue(where: GitHubIssueWhereUniqueInput!): GitHubIssue
        deleteManyGitHubIssues(where: GitHubIssueWhereInput): BatchPayload!
        createGitHubLabel(data: GitHubLabelCreateInput!): GitHubLabel!
        updateGitHubLabel(
            data: GitHubLabelUpdateInput!
            where: GitHubLabelWhereUniqueInput!
        ): GitHubLabel
        updateManyGitHubLabels(
            data: GitHubLabelUpdateManyMutationInput!
            where: GitHubLabelWhereInput
        ): BatchPayload!
        upsertGitHubLabel(
            where: GitHubLabelWhereUniqueInput!
            create: GitHubLabelCreateInput!
            update: GitHubLabelUpdateInput!
        ): GitHubLabel!
        deleteGitHubLabel(where: GitHubLabelWhereUniqueInput!): GitHubLabel
        deleteManyGitHubLabels(where: GitHubLabelWhereInput): BatchPayload!
        createGitHubPullRequest(
            data: GitHubPullRequestCreateInput!
        ): GitHubPullRequest!
        updateGitHubPullRequest(
            data: GitHubPullRequestUpdateInput!
            where: GitHubPullRequestWhereUniqueInput!
        ): GitHubPullRequest
        updateManyGitHubPullRequests(
            data: GitHubPullRequestUpdateManyMutationInput!
            where: GitHubPullRequestWhereInput
        ): BatchPayload!
        upsertGitHubPullRequest(
            where: GitHubPullRequestWhereUniqueInput!
            create: GitHubPullRequestCreateInput!
            update: GitHubPullRequestUpdateInput!
        ): GitHubPullRequest!
        deleteGitHubPullRequest(
            where: GitHubPullRequestWhereUniqueInput!
        ): GitHubPullRequest
        deleteManyGitHubPullRequests(
            where: GitHubPullRequestWhereInput
        ): BatchPayload!
        createGitHubPullRequestReview(
            data: GitHubPullRequestReviewCreateInput!
        ): GitHubPullRequestReview!
        updateGitHubPullRequestReview(
            data: GitHubPullRequestReviewUpdateInput!
            where: GitHubPullRequestReviewWhereUniqueInput!
        ): GitHubPullRequestReview
        updateManyGitHubPullRequestReviews(
            data: GitHubPullRequestReviewUpdateManyMutationInput!
            where: GitHubPullRequestReviewWhereInput
        ): BatchPayload!
        upsertGitHubPullRequestReview(
            where: GitHubPullRequestReviewWhereUniqueInput!
            create: GitHubPullRequestReviewCreateInput!
            update: GitHubPullRequestReviewUpdateInput!
        ): GitHubPullRequestReview!
        deleteGitHubPullRequestReview(
            where: GitHubPullRequestReviewWhereUniqueInput!
        ): GitHubPullRequestReview
        deleteManyGitHubPullRequestReviews(
            where: GitHubPullRequestReviewWhereInput
        ): BatchPayload!
        createGitHubRepository(
            data: GitHubRepositoryCreateInput!
        ): GitHubRepository!
        updateGitHubRepository(
            data: GitHubRepositoryUpdateInput!
            where: GitHubRepositoryWhereUniqueInput!
        ): GitHubRepository
        updateManyGitHubRepositories(
            data: GitHubRepositoryUpdateManyMutationInput!
            where: GitHubRepositoryWhereInput
        ): BatchPayload!
        upsertGitHubRepository(
            where: GitHubRepositoryWhereUniqueInput!
            create: GitHubRepositoryCreateInput!
            update: GitHubRepositoryUpdateInput!
        ): GitHubRepository!
        deleteGitHubRepository(
            where: GitHubRepositoryWhereUniqueInput!
        ): GitHubRepository
        deleteManyGitHubRepositories(
            where: GitHubRepositoryWhereInput
        ): BatchPayload!
        createGitHubReviewRequest(
            data: GitHubReviewRequestCreateInput!
        ): GitHubReviewRequest!
        updateGitHubReviewRequest(
            data: GitHubReviewRequestUpdateInput!
            where: GitHubReviewRequestWhereUniqueInput!
        ): GitHubReviewRequest
        upsertGitHubReviewRequest(
            where: GitHubReviewRequestWhereUniqueInput!
            create: GitHubReviewRequestCreateInput!
            update: GitHubReviewRequestUpdateInput!
        ): GitHubReviewRequest!
        deleteGitHubReviewRequest(
            where: GitHubReviewRequestWhereUniqueInput!
        ): GitHubReviewRequest
        deleteManyGitHubReviewRequests(
            where: GitHubReviewRequestWhereInput
        ): BatchPayload!
        createGitHubReviewThread(
            data: GitHubReviewThreadCreateInput!
        ): GitHubReviewThread!
        updateGitHubReviewThread(
            data: GitHubReviewThreadUpdateInput!
            where: GitHubReviewThreadWhereUniqueInput!
        ): GitHubReviewThread
        updateManyGitHubReviewThreads(
            data: GitHubReviewThreadUpdateManyMutationInput!
            where: GitHubReviewThreadWhereInput
        ): BatchPayload!
        upsertGitHubReviewThread(
            where: GitHubReviewThreadWhereUniqueInput!
            create: GitHubReviewThreadCreateInput!
            update: GitHubReviewThreadUpdateInput!
        ): GitHubReviewThread!
        deleteGitHubReviewThread(
            where: GitHubReviewThreadWhereUniqueInput!
        ): GitHubReviewThread
        deleteManyGitHubReviewThreads(
            where: GitHubReviewThreadWhereInput
        ): BatchPayload!
        createGitHubTopic(data: GitHubTopicCreateInput!): GitHubTopic!
        updateGitHubTopic(
            data: GitHubTopicUpdateInput!
            where: GitHubTopicWhereUniqueInput!
        ): GitHubTopic
        updateManyGitHubTopics(
            data: GitHubTopicUpdateManyMutationInput!
            where: GitHubTopicWhereInput
        ): BatchPayload!
        upsertGitHubTopic(
            where: GitHubTopicWhereUniqueInput!
            create: GitHubTopicCreateInput!
            update: GitHubTopicUpdateInput!
        ): GitHubTopic!
        deleteGitHubTopic(where: GitHubTopicWhereUniqueInput!): GitHubTopic
        deleteManyGitHubTopics(where: GitHubTopicWhereInput): BatchPayload!
        createGitHubUser(data: GitHubUserCreateInput!): GitHubUser!
        updateGitHubUser(
            data: GitHubUserUpdateInput!
            where: GitHubUserWhereUniqueInput!
        ): GitHubUser
        updateManyGitHubUsers(
            data: GitHubUserUpdateManyMutationInput!
            where: GitHubUserWhereInput
        ): BatchPayload!
        upsertGitHubUser(
            where: GitHubUserWhereUniqueInput!
            create: GitHubUserCreateInput!
            update: GitHubUserUpdateInput!
        ): GitHubUser!
        deleteGitHubUser(where: GitHubUserWhereUniqueInput!): GitHubUser
        deleteManyGitHubUsers(where: GitHubUserWhereInput): BatchPayload!
        createGitHubWebhookEvent(
            data: GitHubWebhookEventCreateInput!
        ): GitHubWebhookEvent!
        updateGitHubWebhookEvent(
            data: GitHubWebhookEventUpdateInput!
            where: GitHubWebhookEventWhereUniqueInput!
        ): GitHubWebhookEvent
        updateManyGitHubWebhookEvents(
            data: GitHubWebhookEventUpdateManyMutationInput!
            where: GitHubWebhookEventWhereInput
        ): BatchPayload!
        upsertGitHubWebhookEvent(
            where: GitHubWebhookEventWhereUniqueInput!
            create: GitHubWebhookEventCreateInput!
            update: GitHubWebhookEventUpdateInput!
        ): GitHubWebhookEvent!
        deleteGitHubWebhookEvent(
            where: GitHubWebhookEventWhereUniqueInput!
        ): GitHubWebhookEvent
        deleteManyGitHubWebhookEvents(
            where: GitHubWebhookEventWhereInput
        ): BatchPayload!
        createPost(data: PostCreateInput!): Post!
        updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
        updateManyPosts(
            data: PostUpdateManyMutationInput!
            where: PostWhereInput
        ): BatchPayload!
        upsertPost(
            where: PostWhereUniqueInput!
            create: PostCreateInput!
            update: PostUpdateInput!
        ): Post!
        deletePost(where: PostWhereUniqueInput!): Post
        deleteManyPosts(where: PostWhereInput): BatchPayload!
        createRepository(data: RepositoryCreateInput!): Repository!
        updateRepository(
            data: RepositoryUpdateInput!
            where: RepositoryWhereUniqueInput!
        ): Repository
        updateManyRepositories(
            data: RepositoryUpdateManyMutationInput!
            where: RepositoryWhereInput
        ): BatchPayload!
        upsertRepository(
            where: RepositoryWhereUniqueInput!
            create: RepositoryCreateInput!
            update: RepositoryUpdateInput!
        ): Repository!
        deleteRepository(where: RepositoryWhereUniqueInput!): Repository
        deleteManyRepositories(where: RepositoryWhereInput): BatchPayload!
        createUser(data: UserCreateInput!): User!
        updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
        updateManyUsers(
            data: UserUpdateManyMutationInput!
            where: UserWhereInput
        ): BatchPayload!
        upsertUser(
            where: UserWhereUniqueInput!
            create: UserCreateInput!
            update: UserUpdateInput!
        ): User!
        deleteUser(where: UserWhereUniqueInput!): User
        deleteManyUsers(where: UserWhereInput): BatchPayload!
    }

    enum MutationType {
        CREATED
        UPDATED
        DELETED
    }

    interface Node {
        id: ID!
    }

    type PageInfo {
        hasNextPage: Boolean!
        hasPreviousPage: Boolean!
        startCursor: String
        endCursor: String
    }

    type Post {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        title: String!
        published: Boolean!
        author: User
    }

    type PostConnection {
        pageInfo: PageInfo!
        edges: [PostEdge]!
        aggregate: AggregatePost!
    }

    input PostCreateInput {
        id: ID
        title: String!
        published: Boolean
        author: UserCreateOneWithoutPostsInput
    }

    input PostCreateManyWithoutAuthorInput {
        create: [PostCreateWithoutAuthorInput!]
        connect: [PostWhereUniqueInput!]
    }

    input PostCreateWithoutAuthorInput {
        id: ID
        title: String!
        published: Boolean
    }

    type PostEdge {
        node: Post!
        cursor: String!
    }

    enum PostOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        title_ASC
        title_DESC
        published_ASC
        published_DESC
    }

    type PostPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        title: String!
        published: Boolean!
    }

    input PostScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        published: Boolean
        published_not: Boolean
        AND: [PostScalarWhereInput!]
        OR: [PostScalarWhereInput!]
        NOT: [PostScalarWhereInput!]
    }

    type PostSubscriptionPayload {
        mutation: MutationType!
        node: Post
        updatedFields: [String!]
        previousValues: PostPreviousValues
    }

    input PostSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: PostWhereInput
        AND: [PostSubscriptionWhereInput!]
    }

    input PostUpdateInput {
        title: String
        published: Boolean
        author: UserUpdateOneWithoutPostsInput
    }

    input PostUpdateManyDataInput {
        title: String
        published: Boolean
    }

    input PostUpdateManyMutationInput {
        title: String
        published: Boolean
    }

    input PostUpdateManyWithoutAuthorInput {
        create: [PostCreateWithoutAuthorInput!]
        delete: [PostWhereUniqueInput!]
        connect: [PostWhereUniqueInput!]
        set: [PostWhereUniqueInput!]
        disconnect: [PostWhereUniqueInput!]
        update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
        upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
        deleteMany: [PostScalarWhereInput!]
        updateMany: [PostUpdateManyWithWhereNestedInput!]
    }

    input PostUpdateManyWithWhereNestedInput {
        where: PostScalarWhereInput!
        data: PostUpdateManyDataInput!
    }

    input PostUpdateWithoutAuthorDataInput {
        title: String
        published: Boolean
    }

    input PostUpdateWithWhereUniqueWithoutAuthorInput {
        where: PostWhereUniqueInput!
        data: PostUpdateWithoutAuthorDataInput!
    }

    input PostUpsertWithWhereUniqueWithoutAuthorInput {
        where: PostWhereUniqueInput!
        update: PostUpdateWithoutAuthorDataInput!
        create: PostCreateWithoutAuthorInput!
    }

    input PostWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        title: String
        title_not: String
        title_in: [String!]
        title_not_in: [String!]
        title_lt: String
        title_lte: String
        title_gt: String
        title_gte: String
        title_contains: String
        title_not_contains: String
        title_starts_with: String
        title_not_starts_with: String
        title_ends_with: String
        title_not_ends_with: String
        published: Boolean
        published_not: Boolean
        author: UserWhereInput
        AND: [PostWhereInput!]
    }

    input PostWhereUniqueInput {
        id: ID
    }

    type Query {
        appKey(where: AppKeyWhereUniqueInput!): AppKey
        appKeys(
            where: AppKeyWhereInput
            orderBy: AppKeyOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [AppKey]!
        appKeysConnection(
            where: AppKeyWhereInput
            orderBy: AppKeyOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): AppKeyConnection!
        game(where: GameWhereUniqueInput!): Game
        games(
            where: GameWhereInput
            orderBy: GameOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [Game]!
        gamesConnection(
            where: GameWhereInput
            orderBy: GameOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GameConnection!
        gitHubBranch(where: GitHubBranchWhereUniqueInput!): GitHubBranch
        gitHubBranches(
            where: GitHubBranchWhereInput
            orderBy: GitHubBranchOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubBranch]!
        gitHubBranchesConnection(
            where: GitHubBranchWhereInput
            orderBy: GitHubBranchOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubBranchConnection!
        gitHubComment(where: GitHubCommentWhereUniqueInput!): GitHubComment
        gitHubComments(
            where: GitHubCommentWhereInput
            orderBy: GitHubCommentOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubComment]!
        gitHubCommentsConnection(
            where: GitHubCommentWhereInput
            orderBy: GitHubCommentOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubCommentConnection!
        gitHubCommit(where: GitHubCommitWhereUniqueInput!): GitHubCommit
        gitHubCommits(
            where: GitHubCommitWhereInput
            orderBy: GitHubCommitOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubCommit]!
        gitHubCommitsConnection(
            where: GitHubCommitWhereInput
            orderBy: GitHubCommitOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubCommitConnection!
        gitHubFileDiff(where: GitHubFileDiffWhereUniqueInput!): GitHubFileDiff
        gitHubFileDiffs(
            where: GitHubFileDiffWhereInput
            orderBy: GitHubFileDiffOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubFileDiff]!
        gitHubFileDiffsConnection(
            where: GitHubFileDiffWhereInput
            orderBy: GitHubFileDiffOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubFileDiffConnection!
        gitHubIssue(where: GitHubIssueWhereUniqueInput!): GitHubIssue
        gitHubIssues(
            where: GitHubIssueWhereInput
            orderBy: GitHubIssueOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubIssue]!
        gitHubIssuesConnection(
            where: GitHubIssueWhereInput
            orderBy: GitHubIssueOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubIssueConnection!
        gitHubLabel(where: GitHubLabelWhereUniqueInput!): GitHubLabel
        gitHubLabels(
            where: GitHubLabelWhereInput
            orderBy: GitHubLabelOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubLabel]!
        gitHubLabelsConnection(
            where: GitHubLabelWhereInput
            orderBy: GitHubLabelOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubLabelConnection!
        gitHubPullRequest(
            where: GitHubPullRequestWhereUniqueInput!
        ): GitHubPullRequest
        gitHubPullRequests(
            where: GitHubPullRequestWhereInput
            orderBy: GitHubPullRequestOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubPullRequest]!
        gitHubPullRequestsConnection(
            where: GitHubPullRequestWhereInput
            orderBy: GitHubPullRequestOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubPullRequestConnection!
        gitHubPullRequestReview(
            where: GitHubPullRequestReviewWhereUniqueInput!
        ): GitHubPullRequestReview
        gitHubPullRequestReviews(
            where: GitHubPullRequestReviewWhereInput
            orderBy: GitHubPullRequestReviewOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubPullRequestReview]!
        gitHubPullRequestReviewsConnection(
            where: GitHubPullRequestReviewWhereInput
            orderBy: GitHubPullRequestReviewOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubPullRequestReviewConnection!
        gitHubRepository(
            where: GitHubRepositoryWhereUniqueInput!
        ): GitHubRepository
        gitHubRepositories(
            where: GitHubRepositoryWhereInput
            orderBy: GitHubRepositoryOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubRepository]!
        gitHubRepositoriesConnection(
            where: GitHubRepositoryWhereInput
            orderBy: GitHubRepositoryOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubRepositoryConnection!
        gitHubReviewRequest(
            where: GitHubReviewRequestWhereUniqueInput!
        ): GitHubReviewRequest
        gitHubReviewRequests(
            where: GitHubReviewRequestWhereInput
            orderBy: GitHubReviewRequestOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubReviewRequest]!
        gitHubReviewRequestsConnection(
            where: GitHubReviewRequestWhereInput
            orderBy: GitHubReviewRequestOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubReviewRequestConnection!
        gitHubReviewThread(
            where: GitHubReviewThreadWhereUniqueInput!
        ): GitHubReviewThread
        gitHubReviewThreads(
            where: GitHubReviewThreadWhereInput
            orderBy: GitHubReviewThreadOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubReviewThread]!
        gitHubReviewThreadsConnection(
            where: GitHubReviewThreadWhereInput
            orderBy: GitHubReviewThreadOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubReviewThreadConnection!
        gitHubTopic(where: GitHubTopicWhereUniqueInput!): GitHubTopic
        gitHubTopics(
            where: GitHubTopicWhereInput
            orderBy: GitHubTopicOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubTopic]!
        gitHubTopicsConnection(
            where: GitHubTopicWhereInput
            orderBy: GitHubTopicOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubTopicConnection!
        gitHubUser(where: GitHubUserWhereUniqueInput!): GitHubUser
        gitHubUsers(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubUser]!
        gitHubUsersConnection(
            where: GitHubUserWhereInput
            orderBy: GitHubUserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubUserConnection!
        gitHubWebhookEvent(
            where: GitHubWebhookEventWhereUniqueInput!
        ): GitHubWebhookEvent
        gitHubWebhookEvents(
            where: GitHubWebhookEventWhereInput
            orderBy: GitHubWebhookEventOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubWebhookEvent]!
        gitHubWebhookEventsConnection(
            where: GitHubWebhookEventWhereInput
            orderBy: GitHubWebhookEventOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): GitHubWebhookEventConnection!
        post(where: PostWhereUniqueInput!): Post
        posts(
            where: PostWhereInput
            orderBy: PostOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [Post]!
        postsConnection(
            where: PostWhereInput
            orderBy: PostOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): PostConnection!
        repository(where: RepositoryWhereUniqueInput!): Repository
        repositories(
            where: RepositoryWhereInput
            orderBy: RepositoryOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [Repository]!
        repositoriesConnection(
            where: RepositoryWhereInput
            orderBy: RepositoryOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): RepositoryConnection!
        user(where: UserWhereUniqueInput!): User
        users(
            where: UserWhereInput
            orderBy: UserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [User]!
        usersConnection(
            where: UserWhereInput
            orderBy: UserOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): UserConnection!
        node(id: ID!): Node
    }

    type Repository {
        id: ID!
        idExternal: String!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        addedBy: User!
        name: String!
        description: String!
        homepageUrl: String
        url: String!
        owner: String!
        isTracked: Boolean!
        appKey: AppKey!
        isFork: Boolean!
        isLocked: Boolean!
        isPrivate: Boolean!
        isArchived: Boolean!
        isDisabled: Boolean!
        sshUrl: String
        webhookEvents(
            where: GitHubWebhookEventWhereInput
            orderBy: GitHubWebhookEventOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [GitHubWebhookEvent!]
        game: Game
    }

    type RepositoryConnection {
        pageInfo: PageInfo!
        edges: [RepositoryEdge]!
        aggregate: AggregateRepository!
    }

    input RepositoryCreateInput {
        id: ID
        idExternal: String!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        addedBy: UserCreateOneWithoutAddedRepositoriesInput!
        name: String!
        description: String
        homepageUrl: String
        url: String!
        owner: String!
        isTracked: Boolean!
        appKey: AppKeyCreateOneWithoutRepositoriesInput!
        isFork: Boolean!
        isLocked: Boolean!
        isPrivate: Boolean!
        isArchived: Boolean!
        isDisabled: Boolean!
        sshUrl: String
        webhookEvents: GitHubWebhookEventCreateManyWithoutRepositoryInput
        game: GameCreateOneWithoutRepositoryInput
    }

    input RepositoryCreateManyWithoutAddedByInput {
        create: [RepositoryCreateWithoutAddedByInput!]
        connect: [RepositoryWhereUniqueInput!]
    }

    input RepositoryCreateManyWithoutAppKeyInput {
        create: [RepositoryCreateWithoutAppKeyInput!]
        connect: [RepositoryWhereUniqueInput!]
    }

    input RepositoryCreateOneWithoutGameInput {
        create: RepositoryCreateWithoutGameInput
        connect: RepositoryWhereUniqueInput
    }

    input RepositoryCreateOneWithoutWebhookEventsInput {
        create: RepositoryCreateWithoutWebhookEventsInput
        connect: RepositoryWhereUniqueInput
    }

    input RepositoryCreateWithoutAddedByInput {
        id: ID
        idExternal: String!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        name: String!
        description: String
        homepageUrl: String
        url: String!
        owner: String!
        isTracked: Boolean!
        appKey: AppKeyCreateOneWithoutRepositoriesInput!
        isFork: Boolean!
        isLocked: Boolean!
        isPrivate: Boolean!
        isArchived: Boolean!
        isDisabled: Boolean!
        sshUrl: String
        webhookEvents: GitHubWebhookEventCreateManyWithoutRepositoryInput
        game: GameCreateOneWithoutRepositoryInput
    }

    input RepositoryCreateWithoutAppKeyInput {
        id: ID
        idExternal: String!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        addedBy: UserCreateOneWithoutAddedRepositoriesInput!
        name: String!
        description: String
        homepageUrl: String
        url: String!
        owner: String!
        isTracked: Boolean!
        isFork: Boolean!
        isLocked: Boolean!
        isPrivate: Boolean!
        isArchived: Boolean!
        isDisabled: Boolean!
        sshUrl: String
        webhookEvents: GitHubWebhookEventCreateManyWithoutRepositoryInput
        game: GameCreateOneWithoutRepositoryInput
    }

    input RepositoryCreateWithoutGameInput {
        id: ID
        idExternal: String!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        addedBy: UserCreateOneWithoutAddedRepositoriesInput!
        name: String!
        description: String
        homepageUrl: String
        url: String!
        owner: String!
        isTracked: Boolean!
        appKey: AppKeyCreateOneWithoutRepositoriesInput!
        isFork: Boolean!
        isLocked: Boolean!
        isPrivate: Boolean!
        isArchived: Boolean!
        isDisabled: Boolean!
        sshUrl: String
        webhookEvents: GitHubWebhookEventCreateManyWithoutRepositoryInput
    }

    input RepositoryCreateWithoutWebhookEventsInput {
        id: ID
        idExternal: String!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        addedBy: UserCreateOneWithoutAddedRepositoriesInput!
        name: String!
        description: String
        homepageUrl: String
        url: String!
        owner: String!
        isTracked: Boolean!
        appKey: AppKeyCreateOneWithoutRepositoriesInput!
        isFork: Boolean!
        isLocked: Boolean!
        isPrivate: Boolean!
        isArchived: Boolean!
        isDisabled: Boolean!
        sshUrl: String
        game: GameCreateOneWithoutRepositoryInput
    }

    type RepositoryEdge {
        node: Repository!
        cursor: String!
    }

    enum RepositoryOrderByInput {
        id_ASC
        id_DESC
        idExternal_ASC
        idExternal_DESC
        createdAtExternal_ASC
        createdAtExternal_DESC
        updatedAtExternal_ASC
        updatedAtExternal_DESC
        name_ASC
        name_DESC
        description_ASC
        description_DESC
        homepageUrl_ASC
        homepageUrl_DESC
        url_ASC
        url_DESC
        owner_ASC
        owner_DESC
        isTracked_ASC
        isTracked_DESC
        isFork_ASC
        isFork_DESC
        isLocked_ASC
        isLocked_DESC
        isPrivate_ASC
        isPrivate_DESC
        isArchived_ASC
        isArchived_DESC
        isDisabled_ASC
        isDisabled_DESC
        sshUrl_ASC
        sshUrl_DESC
    }

    type RepositoryPreviousValues {
        id: ID!
        idExternal: String!
        createdAtExternal: DateTime!
        updatedAtExternal: DateTime!
        name: String!
        description: String!
        homepageUrl: String
        url: String!
        owner: String!
        isTracked: Boolean!
        isFork: Boolean!
        isLocked: Boolean!
        isPrivate: Boolean!
        isArchived: Boolean!
        isDisabled: Boolean!
        sshUrl: String
    }

    input RepositoryScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        idExternal: String
        idExternal_not: String
        idExternal_in: [String!]
        idExternal_not_in: [String!]
        idExternal_lt: String
        idExternal_lte: String
        idExternal_gt: String
        idExternal_gte: String
        idExternal_contains: String
        idExternal_not_contains: String
        idExternal_starts_with: String
        idExternal_not_starts_with: String
        idExternal_ends_with: String
        idExternal_not_ends_with: String
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        updatedAtExternal: DateTime
        updatedAtExternal_not: DateTime
        updatedAtExternal_in: [DateTime!]
        updatedAtExternal_not_in: [DateTime!]
        updatedAtExternal_lt: DateTime
        updatedAtExternal_lte: DateTime
        updatedAtExternal_gt: DateTime
        updatedAtExternal_gte: DateTime
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        description: String
        description_not: String
        description_in: [String!]
        description_not_in: [String!]
        description_lt: String
        description_lte: String
        description_gt: String
        description_gte: String
        description_contains: String
        description_not_contains: String
        description_starts_with: String
        description_not_starts_with: String
        description_ends_with: String
        description_not_ends_with: String
        homepageUrl: String
        homepageUrl_not: String
        homepageUrl_in: [String!]
        homepageUrl_not_in: [String!]
        homepageUrl_lt: String
        homepageUrl_lte: String
        homepageUrl_gt: String
        homepageUrl_gte: String
        homepageUrl_contains: String
        homepageUrl_not_contains: String
        homepageUrl_starts_with: String
        homepageUrl_not_starts_with: String
        homepageUrl_ends_with: String
        homepageUrl_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        owner: String
        owner_not: String
        owner_in: [String!]
        owner_not_in: [String!]
        owner_lt: String
        owner_lte: String
        owner_gt: String
        owner_gte: String
        owner_contains: String
        owner_not_contains: String
        owner_starts_with: String
        owner_not_starts_with: String
        owner_ends_with: String
        owner_not_ends_with: String
        isTracked: Boolean
        isTracked_not: Boolean
        isFork: Boolean
        isFork_not: Boolean
        isLocked: Boolean
        isLocked_not: Boolean
        isPrivate: Boolean
        isPrivate_not: Boolean
        isArchived: Boolean
        isArchived_not: Boolean
        isDisabled: Boolean
        isDisabled_not: Boolean
        sshUrl: String
        sshUrl_not: String
        sshUrl_in: [String!]
        sshUrl_not_in: [String!]
        sshUrl_lt: String
        sshUrl_lte: String
        sshUrl_gt: String
        sshUrl_gte: String
        sshUrl_contains: String
        sshUrl_not_contains: String
        sshUrl_starts_with: String
        sshUrl_not_starts_with: String
        sshUrl_ends_with: String
        sshUrl_not_ends_with: String
        AND: [RepositoryScalarWhereInput!]
        OR: [RepositoryScalarWhereInput!]
        NOT: [RepositoryScalarWhereInput!]
    }

    type RepositorySubscriptionPayload {
        mutation: MutationType!
        node: Repository
        updatedFields: [String!]
        previousValues: RepositoryPreviousValues
    }

    input RepositorySubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: RepositoryWhereInput
        AND: [RepositorySubscriptionWhereInput!]
    }

    input RepositoryUpdateInput {
        idExternal: String
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        addedBy: UserUpdateOneRequiredWithoutAddedRepositoriesInput
        name: String
        description: String
        homepageUrl: String
        url: String
        owner: String
        isTracked: Boolean
        appKey: AppKeyUpdateOneRequiredWithoutRepositoriesInput
        isFork: Boolean
        isLocked: Boolean
        isPrivate: Boolean
        isArchived: Boolean
        isDisabled: Boolean
        sshUrl: String
        webhookEvents: GitHubWebhookEventUpdateManyWithoutRepositoryInput
        game: GameUpdateOneWithoutRepositoryInput
    }

    input RepositoryUpdateManyDataInput {
        idExternal: String
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        name: String
        description: String
        homepageUrl: String
        url: String
        owner: String
        isTracked: Boolean
        isFork: Boolean
        isLocked: Boolean
        isPrivate: Boolean
        isArchived: Boolean
        isDisabled: Boolean
        sshUrl: String
    }

    input RepositoryUpdateManyMutationInput {
        idExternal: String
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        name: String
        description: String
        homepageUrl: String
        url: String
        owner: String
        isTracked: Boolean
        isFork: Boolean
        isLocked: Boolean
        isPrivate: Boolean
        isArchived: Boolean
        isDisabled: Boolean
        sshUrl: String
    }

    input RepositoryUpdateManyWithoutAddedByInput {
        create: [RepositoryCreateWithoutAddedByInput!]
        delete: [RepositoryWhereUniqueInput!]
        connect: [RepositoryWhereUniqueInput!]
        set: [RepositoryWhereUniqueInput!]
        disconnect: [RepositoryWhereUniqueInput!]
        update: [RepositoryUpdateWithWhereUniqueWithoutAddedByInput!]
        upsert: [RepositoryUpsertWithWhereUniqueWithoutAddedByInput!]
        deleteMany: [RepositoryScalarWhereInput!]
        updateMany: [RepositoryUpdateManyWithWhereNestedInput!]
    }

    input RepositoryUpdateManyWithoutAppKeyInput {
        create: [RepositoryCreateWithoutAppKeyInput!]
        delete: [RepositoryWhereUniqueInput!]
        connect: [RepositoryWhereUniqueInput!]
        set: [RepositoryWhereUniqueInput!]
        disconnect: [RepositoryWhereUniqueInput!]
        update: [RepositoryUpdateWithWhereUniqueWithoutAppKeyInput!]
        upsert: [RepositoryUpsertWithWhereUniqueWithoutAppKeyInput!]
        deleteMany: [RepositoryScalarWhereInput!]
        updateMany: [RepositoryUpdateManyWithWhereNestedInput!]
    }

    input RepositoryUpdateManyWithWhereNestedInput {
        where: RepositoryScalarWhereInput!
        data: RepositoryUpdateManyDataInput!
    }

    input RepositoryUpdateOneRequiredWithoutGameInput {
        create: RepositoryCreateWithoutGameInput
        update: RepositoryUpdateWithoutGameDataInput
        upsert: RepositoryUpsertWithoutGameInput
        connect: RepositoryWhereUniqueInput
    }

    input RepositoryUpdateOneRequiredWithoutWebhookEventsInput {
        create: RepositoryCreateWithoutWebhookEventsInput
        update: RepositoryUpdateWithoutWebhookEventsDataInput
        upsert: RepositoryUpsertWithoutWebhookEventsInput
        connect: RepositoryWhereUniqueInput
    }

    input RepositoryUpdateWithoutAddedByDataInput {
        idExternal: String
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        name: String
        description: String
        homepageUrl: String
        url: String
        owner: String
        isTracked: Boolean
        appKey: AppKeyUpdateOneRequiredWithoutRepositoriesInput
        isFork: Boolean
        isLocked: Boolean
        isPrivate: Boolean
        isArchived: Boolean
        isDisabled: Boolean
        sshUrl: String
        webhookEvents: GitHubWebhookEventUpdateManyWithoutRepositoryInput
        game: GameUpdateOneWithoutRepositoryInput
    }

    input RepositoryUpdateWithoutAppKeyDataInput {
        idExternal: String
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        addedBy: UserUpdateOneRequiredWithoutAddedRepositoriesInput
        name: String
        description: String
        homepageUrl: String
        url: String
        owner: String
        isTracked: Boolean
        isFork: Boolean
        isLocked: Boolean
        isPrivate: Boolean
        isArchived: Boolean
        isDisabled: Boolean
        sshUrl: String
        webhookEvents: GitHubWebhookEventUpdateManyWithoutRepositoryInput
        game: GameUpdateOneWithoutRepositoryInput
    }

    input RepositoryUpdateWithoutGameDataInput {
        idExternal: String
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        addedBy: UserUpdateOneRequiredWithoutAddedRepositoriesInput
        name: String
        description: String
        homepageUrl: String
        url: String
        owner: String
        isTracked: Boolean
        appKey: AppKeyUpdateOneRequiredWithoutRepositoriesInput
        isFork: Boolean
        isLocked: Boolean
        isPrivate: Boolean
        isArchived: Boolean
        isDisabled: Boolean
        sshUrl: String
        webhookEvents: GitHubWebhookEventUpdateManyWithoutRepositoryInput
    }

    input RepositoryUpdateWithoutWebhookEventsDataInput {
        idExternal: String
        createdAtExternal: DateTime
        updatedAtExternal: DateTime
        addedBy: UserUpdateOneRequiredWithoutAddedRepositoriesInput
        name: String
        description: String
        homepageUrl: String
        url: String
        owner: String
        isTracked: Boolean
        appKey: AppKeyUpdateOneRequiredWithoutRepositoriesInput
        isFork: Boolean
        isLocked: Boolean
        isPrivate: Boolean
        isArchived: Boolean
        isDisabled: Boolean
        sshUrl: String
        game: GameUpdateOneWithoutRepositoryInput
    }

    input RepositoryUpdateWithWhereUniqueWithoutAddedByInput {
        where: RepositoryWhereUniqueInput!
        data: RepositoryUpdateWithoutAddedByDataInput!
    }

    input RepositoryUpdateWithWhereUniqueWithoutAppKeyInput {
        where: RepositoryWhereUniqueInput!
        data: RepositoryUpdateWithoutAppKeyDataInput!
    }

    input RepositoryUpsertWithoutGameInput {
        update: RepositoryUpdateWithoutGameDataInput!
        create: RepositoryCreateWithoutGameInput!
    }

    input RepositoryUpsertWithoutWebhookEventsInput {
        update: RepositoryUpdateWithoutWebhookEventsDataInput!
        create: RepositoryCreateWithoutWebhookEventsInput!
    }

    input RepositoryUpsertWithWhereUniqueWithoutAddedByInput {
        where: RepositoryWhereUniqueInput!
        update: RepositoryUpdateWithoutAddedByDataInput!
        create: RepositoryCreateWithoutAddedByInput!
    }

    input RepositoryUpsertWithWhereUniqueWithoutAppKeyInput {
        where: RepositoryWhereUniqueInput!
        update: RepositoryUpdateWithoutAppKeyDataInput!
        create: RepositoryCreateWithoutAppKeyInput!
    }

    input RepositoryWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        idExternal: String
        idExternal_not: String
        idExternal_in: [String!]
        idExternal_not_in: [String!]
        idExternal_lt: String
        idExternal_lte: String
        idExternal_gt: String
        idExternal_gte: String
        idExternal_contains: String
        idExternal_not_contains: String
        idExternal_starts_with: String
        idExternal_not_starts_with: String
        idExternal_ends_with: String
        idExternal_not_ends_with: String
        createdAtExternal: DateTime
        createdAtExternal_not: DateTime
        createdAtExternal_in: [DateTime!]
        createdAtExternal_not_in: [DateTime!]
        createdAtExternal_lt: DateTime
        createdAtExternal_lte: DateTime
        createdAtExternal_gt: DateTime
        createdAtExternal_gte: DateTime
        updatedAtExternal: DateTime
        updatedAtExternal_not: DateTime
        updatedAtExternal_in: [DateTime!]
        updatedAtExternal_not_in: [DateTime!]
        updatedAtExternal_lt: DateTime
        updatedAtExternal_lte: DateTime
        updatedAtExternal_gt: DateTime
        updatedAtExternal_gte: DateTime
        addedBy: UserWhereInput
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        description: String
        description_not: String
        description_in: [String!]
        description_not_in: [String!]
        description_lt: String
        description_lte: String
        description_gt: String
        description_gte: String
        description_contains: String
        description_not_contains: String
        description_starts_with: String
        description_not_starts_with: String
        description_ends_with: String
        description_not_ends_with: String
        homepageUrl: String
        homepageUrl_not: String
        homepageUrl_in: [String!]
        homepageUrl_not_in: [String!]
        homepageUrl_lt: String
        homepageUrl_lte: String
        homepageUrl_gt: String
        homepageUrl_gte: String
        homepageUrl_contains: String
        homepageUrl_not_contains: String
        homepageUrl_starts_with: String
        homepageUrl_not_starts_with: String
        homepageUrl_ends_with: String
        homepageUrl_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        owner: String
        owner_not: String
        owner_in: [String!]
        owner_not_in: [String!]
        owner_lt: String
        owner_lte: String
        owner_gt: String
        owner_gte: String
        owner_contains: String
        owner_not_contains: String
        owner_starts_with: String
        owner_not_starts_with: String
        owner_ends_with: String
        owner_not_ends_with: String
        isTracked: Boolean
        isTracked_not: Boolean
        appKey: AppKeyWhereInput
        isFork: Boolean
        isFork_not: Boolean
        isLocked: Boolean
        isLocked_not: Boolean
        isPrivate: Boolean
        isPrivate_not: Boolean
        isArchived: Boolean
        isArchived_not: Boolean
        isDisabled: Boolean
        isDisabled_not: Boolean
        sshUrl: String
        sshUrl_not: String
        sshUrl_in: [String!]
        sshUrl_not_in: [String!]
        sshUrl_lt: String
        sshUrl_lte: String
        sshUrl_gt: String
        sshUrl_gte: String
        sshUrl_contains: String
        sshUrl_not_contains: String
        sshUrl_starts_with: String
        sshUrl_not_starts_with: String
        sshUrl_ends_with: String
        sshUrl_not_ends_with: String
        webhookEvents_some: GitHubWebhookEventWhereInput
        game: GameWhereInput
        AND: [RepositoryWhereInput!]
    }

    input RepositoryWhereUniqueInput {
        id: ID
        idExternal: String
        name: String
    }

    enum Role {
        USER
        ADMIN
    }

    type Subscription {
        appKey(where: AppKeySubscriptionWhereInput): AppKeySubscriptionPayload
        game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
        gitHubBranch(
            where: GitHubBranchSubscriptionWhereInput
        ): GitHubBranchSubscriptionPayload
        gitHubComment(
            where: GitHubCommentSubscriptionWhereInput
        ): GitHubCommentSubscriptionPayload
        gitHubCommit(
            where: GitHubCommitSubscriptionWhereInput
        ): GitHubCommitSubscriptionPayload
        gitHubFileDiff(
            where: GitHubFileDiffSubscriptionWhereInput
        ): GitHubFileDiffSubscriptionPayload
        gitHubIssue(
            where: GitHubIssueSubscriptionWhereInput
        ): GitHubIssueSubscriptionPayload
        gitHubLabel(
            where: GitHubLabelSubscriptionWhereInput
        ): GitHubLabelSubscriptionPayload
        gitHubPullRequest(
            where: GitHubPullRequestSubscriptionWhereInput
        ): GitHubPullRequestSubscriptionPayload
        gitHubPullRequestReview(
            where: GitHubPullRequestReviewSubscriptionWhereInput
        ): GitHubPullRequestReviewSubscriptionPayload
        gitHubRepository(
            where: GitHubRepositorySubscriptionWhereInput
        ): GitHubRepositorySubscriptionPayload
        gitHubReviewRequest(
            where: GitHubReviewRequestSubscriptionWhereInput
        ): GitHubReviewRequestSubscriptionPayload
        gitHubReviewThread(
            where: GitHubReviewThreadSubscriptionWhereInput
        ): GitHubReviewThreadSubscriptionPayload
        gitHubTopic(
            where: GitHubTopicSubscriptionWhereInput
        ): GitHubTopicSubscriptionPayload
        gitHubUser(
            where: GitHubUserSubscriptionWhereInput
        ): GitHubUserSubscriptionPayload
        gitHubWebhookEvent(
            where: GitHubWebhookEventSubscriptionWhereInput
        ): GitHubWebhookEventSubscriptionPayload
        post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
        repository(
            where: RepositorySubscriptionWhereInput
        ): RepositorySubscriptionPayload
        user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
    }

    type User {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        posts(
            where: PostWhereInput
            orderBy: PostOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [Post!]
        keys(
            where: AppKeyWhereInput
            orderBy: AppKeyOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [AppKey!]
        addedRepositories(
            where: RepositoryWhereInput
            orderBy: RepositoryOrderByInput
            skip: Int
            after: String
            before: String
            first: Int
            last: Int
        ): [Repository!]
        email: String!
        name: String
        password: String!
        role: Role!
        gitLogin: String!
    }

    type UserConnection {
        pageInfo: PageInfo!
        edges: [UserEdge]!
        aggregate: AggregateUser!
    }

    input UserCreateInput {
        id: ID
        posts: PostCreateManyWithoutAuthorInput
        keys: AppKeyCreateManyWithoutUserInput
        addedRepositories: RepositoryCreateManyWithoutAddedByInput
        email: String!
        name: String
        password: String!
        role: Role
        gitLogin: String!
    }

    input UserCreateOneInput {
        create: UserCreateInput
        connect: UserWhereUniqueInput
    }

    input UserCreateOneWithoutAddedRepositoriesInput {
        create: UserCreateWithoutAddedRepositoriesInput
        connect: UserWhereUniqueInput
    }

    input UserCreateOneWithoutKeysInput {
        create: UserCreateWithoutKeysInput
        connect: UserWhereUniqueInput
    }

    input UserCreateOneWithoutPostsInput {
        create: UserCreateWithoutPostsInput
        connect: UserWhereUniqueInput
    }

    input UserCreateWithoutAddedRepositoriesInput {
        id: ID
        posts: PostCreateManyWithoutAuthorInput
        keys: AppKeyCreateManyWithoutUserInput
        email: String!
        name: String
        password: String!
        role: Role
        gitLogin: String!
    }

    input UserCreateWithoutKeysInput {
        id: ID
        posts: PostCreateManyWithoutAuthorInput
        addedRepositories: RepositoryCreateManyWithoutAddedByInput
        email: String!
        name: String
        password: String!
        role: Role
        gitLogin: String!
    }

    input UserCreateWithoutPostsInput {
        id: ID
        keys: AppKeyCreateManyWithoutUserInput
        addedRepositories: RepositoryCreateManyWithoutAddedByInput
        email: String!
        name: String
        password: String!
        role: Role
        gitLogin: String!
    }

    type UserEdge {
        node: User!
        cursor: String!
    }

    enum UserOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        email_ASC
        email_DESC
        name_ASC
        name_DESC
        password_ASC
        password_DESC
        role_ASC
        role_DESC
        gitLogin_ASC
        gitLogin_DESC
    }

    type UserPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        email: String!
        name: String
        password: String!
        role: Role!
        gitLogin: String!
    }

    type UserSubscriptionPayload {
        mutation: MutationType!
        node: User
        updatedFields: [String!]
        previousValues: UserPreviousValues
    }

    input UserSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: UserWhereInput
        AND: [UserSubscriptionWhereInput!]
    }

    input UserUpdateDataInput {
        posts: PostUpdateManyWithoutAuthorInput
        keys: AppKeyUpdateManyWithoutUserInput
        addedRepositories: RepositoryUpdateManyWithoutAddedByInput
        email: String
        name: String
        password: String
        role: Role
        gitLogin: String
    }

    input UserUpdateInput {
        posts: PostUpdateManyWithoutAuthorInput
        keys: AppKeyUpdateManyWithoutUserInput
        addedRepositories: RepositoryUpdateManyWithoutAddedByInput
        email: String
        name: String
        password: String
        role: Role
        gitLogin: String
    }

    input UserUpdateManyMutationInput {
        email: String
        name: String
        password: String
        role: Role
        gitLogin: String
    }

    input UserUpdateOneRequiredInput {
        create: UserCreateInput
        update: UserUpdateDataInput
        upsert: UserUpsertNestedInput
        connect: UserWhereUniqueInput
    }

    input UserUpdateOneRequiredWithoutAddedRepositoriesInput {
        create: UserCreateWithoutAddedRepositoriesInput
        update: UserUpdateWithoutAddedRepositoriesDataInput
        upsert: UserUpsertWithoutAddedRepositoriesInput
        connect: UserWhereUniqueInput
    }

    input UserUpdateOneRequiredWithoutKeysInput {
        create: UserCreateWithoutKeysInput
        update: UserUpdateWithoutKeysDataInput
        upsert: UserUpsertWithoutKeysInput
        connect: UserWhereUniqueInput
    }

    input UserUpdateOneWithoutPostsInput {
        create: UserCreateWithoutPostsInput
        update: UserUpdateWithoutPostsDataInput
        upsert: UserUpsertWithoutPostsInput
        delete: Boolean
        disconnect: Boolean
        connect: UserWhereUniqueInput
    }

    input UserUpdateWithoutAddedRepositoriesDataInput {
        posts: PostUpdateManyWithoutAuthorInput
        keys: AppKeyUpdateManyWithoutUserInput
        email: String
        name: String
        password: String
        role: Role
        gitLogin: String
    }

    input UserUpdateWithoutKeysDataInput {
        posts: PostUpdateManyWithoutAuthorInput
        addedRepositories: RepositoryUpdateManyWithoutAddedByInput
        email: String
        name: String
        password: String
        role: Role
        gitLogin: String
    }

    input UserUpdateWithoutPostsDataInput {
        keys: AppKeyUpdateManyWithoutUserInput
        addedRepositories: RepositoryUpdateManyWithoutAddedByInput
        email: String
        name: String
        password: String
        role: Role
        gitLogin: String
    }

    input UserUpsertNestedInput {
        update: UserUpdateDataInput!
        create: UserCreateInput!
    }

    input UserUpsertWithoutAddedRepositoriesInput {
        update: UserUpdateWithoutAddedRepositoriesDataInput!
        create: UserCreateWithoutAddedRepositoriesInput!
    }

    input UserUpsertWithoutKeysInput {
        update: UserUpdateWithoutKeysDataInput!
        create: UserCreateWithoutKeysInput!
    }

    input UserUpsertWithoutPostsInput {
        update: UserUpdateWithoutPostsDataInput!
        create: UserCreateWithoutPostsInput!
    }

    input UserWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        posts_some: PostWhereInput
        keys_some: AppKeyWhereInput
        addedRepositories_some: RepositoryWhereInput
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        password: String
        password_not: String
        password_in: [String!]
        password_not_in: [String!]
        password_lt: String
        password_lte: String
        password_gt: String
        password_gte: String
        password_contains: String
        password_not_contains: String
        password_starts_with: String
        password_not_starts_with: String
        password_ends_with: String
        password_not_ends_with: String
        role: Role
        role_not: Role
        role_in: [Role!]
        role_not_in: [Role!]
        gitLogin: String
        gitLogin_not: String
        gitLogin_in: [String!]
        gitLogin_not_in: [String!]
        gitLogin_lt: String
        gitLogin_lte: String
        gitLogin_gt: String
        gitLogin_gte: String
        gitLogin_contains: String
        gitLogin_not_contains: String
        gitLogin_starts_with: String
        gitLogin_not_starts_with: String
        gitLogin_ends_with: String
        gitLogin_not_ends_with: String
        AND: [UserWhereInput!]
    }

    input UserWhereUniqueInput {
        id: ID
        email: String
    }
`;
