# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ApiKey {
  id: String!
  user: User!
  key: String!
  name: String!
  provider: String!
}

type ApiKeyIsValid {
  valid: Boolean!
}

type AppEvent {
  type: String!
  data: String!
}

type Auth {
  """JWT Bearer token"""
  token: String!
  user: User!
}

input CreateApiKeyInput {
  provider: String!
  name: String!
  key: String!
}

input CreateGameInput {
  gameType: String!
  owner: String!
  repository: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Game {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  repository: Repository!
  title: String!
  owner: User!
  type: String!
}

type GitHubBranch {
  id: String!
  repository: GitHubRepository!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  merged: Boolean!
}

type GitHubComment {
  id: String!
  author: GitHubUser!
  createdAt: DateTime!
  createdAtExternal: DateTime!
  updatedAt: DateTime!
  bodyText: String!
  url: String!
}

type GitHubCommit {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: GitHubUser!
  associatedPullRequests: [GitHubPullRequest!]!
  committer: GitHubUser!
  additions: Float!
  authedDate: DateTime!
  changedFiles: Float!
  commitUrl: String!
  deletions: Float!
  message: String!
  messageHeadline: String!
  pushedDate: DateTime!
  treeUrl: String!
  url: String!
}

type GitHubFileDiff {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  additions: Float!
  deletions: Float!
  filepath: String!
}

type GitHubIssue {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdAtExternal: DateTime!
  updatedAtExternal: DateTime!
  lastEditedAt: DateTime!
  assignees: [GitHubUser!]!
  author: GitHubUser!
  comments: [GitHubComment!]!
  bodyText: String!
  closed: DateTime!
  locked: Boolean!
  number: Float!
  state: String!
  title: String!
  url: String!
}

type GitHubLabel {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdAtExternal: DateTime!
  updatedAtExternal: DateTime!
  color: String!
  description: String!
  name: String!
  url: String!
}

type GitHubPullRequest {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdAtExternal: DateTime!
  publishedAt: DateTime!
  closedAt: DateTime!
  mergedAt: DateTime!
  author: GitHubUser!
  mergedBy: GitHubUser!
  number: Float!
  closed: Boolean!
  isCrossRepository: Boolean!
  locked: Boolean!
  merged: Boolean!
  additions: Float!
  deletions: Float!
  bodyText: Float!
}

type GitHubPullRequestReview {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdAtExternal: DateTime!
  updatedAtExternal: DateTime!
  submittedAt: DateTime!
  lastEditeddAt: DateTime!
  publishedAt: DateTime!
  author: GitHubUser!
  pullRequest: GitHubPullRequest!
  state: String!
  bodyText: String!
  url: String!
}

type GitHubRepository {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdAtExternal: DateTime!
  updatedAtExternal: DateTime!
  owner: GitHubUser!
  hasBranchRules: Boolean!
  hasContributingGuidelines: Boolean!
  hasPullRequestTemplate: Boolean!
  hasReadMe: Boolean!
  hasWiki: Boolean!
  isArchived: Boolean!
  isDisabled: Boolean!
  isFork: Boolean!
  isLocked: Boolean!
  isPrivate: Boolean!
  isTracked: Boolean!
  description: String
  license: String!
  name: String!
  primaryLanguage: String!
  sshUrl: String!
  url: String!
}

type GitHubReviewRequest {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  pullRequest: GitHubPullRequest!
  requestedReviewer: GitHubUser!
}

type GitHubReviewThread {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  pullRequest: GitHubPullRequest!
  repository: GitHubRepository!
  resolvedBy: GitHubUser!
  isResolved: Boolean!
}

type GitHubTopic {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type GitHubUser {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdAtExternal: DateTime!
  isBountyHunter: Boolean!
  isCampusExpert: Boolean!
  isDeveloperProgramMember: Boolean!
  isEmployee: Boolean!
  isHireable: Boolean!
  isSiteAdmin: Boolean!
  isViewer: Boolean!
  url: String!
  name: String!
  login: String!
  avatarUrl: String!
  bio: String!
  company: String!
  email: String!
}

type GitHubWebhookEvent {
  id: String!
  createdAt: DateTime!
  repository: Repository!
  eventType: String!
  action: String!
  sender: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  signup(data: SignupInput!): Auth!
  login(data: LoginInput!): Auth!
  createApiKey(data: CreateApiKeyInput!): ApiKey!
}

type Query {
  validateApiKey(provider: String!, key: String!): Boolean!
  me: User!
  helloWorld: String!
  hello(name: String!): String!
  ping: String!
}

type Repository {
  id: String!
  idExternal: String!
  createdAt: DateTime!
  createdAtExternal: DateTime!
  updatedAt: DateTime!
  updatedAtExternal: DateTime!
  addedBy: User!
  name: String!
  description: String!
  homepageUrl: String!
  url: String!
  owner: String!
  isTracked: Boolean!
  apiKey: ApiKey!
  isFork: Boolean!
  isLocked: Boolean!
  isPrivate: Boolean!
  isDisabled: Boolean!
  isArchived: Boolean!
  sshUrl: String!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  password: String!
  name: String!
  gitLogin: String!
}

type Subscription {
  UserMutatedEvent: User!
}

type User {
  id: String!
  createdAt: String!
  updatedAt: String!
  email: String!
  name: String
  role: Role!
  apiKeys: [ApiKey!]!
  password: String!
  gitLogin: String!
}
