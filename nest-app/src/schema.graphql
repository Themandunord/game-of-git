# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AppKey {
  id: String!
  user: User!
  key: String!
  name: String!
}

type AppKeyIsValid {
  valid: Boolean!
}

type Auth {
  """JWT Bearer token"""
  token: String!
  user: User!
}

input CreateAppKeyInput {
  key: String!
  name: String!
}

"""Date custom scalar type"""
scalar Date

input Email {
  email: String!
}

input EmailOrId {
  email: String!
  id: String!
}

type Game {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  repository: Repository!
  title: String!
  owner: User!
  type: String!
}

type GitHubBranch {
  id: String!
  repository: GitHubRepository!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  merged: Boolean!
}

type GitHubComment {
  id: String!
  author: GitHubUser!
  createdAt: Date!
  createdAtExternal: Date!
  updatedAt: Date!
  bodyText: String!
  url: String!
}

type GitHubCommit {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  author: GitHubUser!
  associatedPullRequests: [GitHubPullRequest!]!
  committer: GitHubUser!
  additions: Float!
  authedDate: Date!
  changedFiles: Float!
  commitUrl: String!
  deletions: Float!
  message: String!
  messageHeadline: String!
  pushedDate: Date!
  treeUrl: String!
  url: String!
}

type GitHubFileDiff {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  additions: Float!
  deletions: Float!
  filepath: String!
}

type GitHubIssue {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  createdAtExternal: Date!
  updatedAtExternal: Date!
  lastEditedAt: Date!
  assignees: [GitHubUser!]!
  author: GitHubUser!
  comments: [GitHubComment!]!
  bodyText: String!
  closed: Date!
  locked: Boolean!
  number: Float!
  state: String!
  title: String!
  url: String!
}

type GitHubLabel {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  createdAtExternal: Date!
  updatedAtExternal: Date!
  color: String!
  description: String!
  name: String!
  url: String!
}

type GitHubPullRequest {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  createdAtExternal: Date!
  publishedAt: Date!
  closedAt: Date!
  mergedAt: Date!
  author: GitHubUser!
  mergedBy: GitHubUser!
  number: Float!
  closed: Boolean!
  isCrossRepository: Boolean!
  locked: Boolean!
  merged: Boolean!
  additions: Float!
  deletions: Float!
  bodyText: Float!
}

type GitHubPullRequestReview {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  createdAtExternal: Date!
  updatedAtExternal: Date!
  submittedAt: Date!
  lastEditeddAt: Date!
  publishedAt: Date!
  author: GitHubUser!
  pullRequest: GitHubPullRequest!
  state: String!
  bodyText: String!
  url: String!
}

type GitHubRepository {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  createdAtExternal: Date!
  updatedAtExternal: Date!
  owner: GitHubUser!
  hasBranchRules: Boolean!
  hasContributingGuidelines: Boolean!
  hasPullRequestTemplate: Boolean!
  hasReadMe: Boolean!
  hasWiki: Boolean!
  isArchived: Boolean!
  isDisabled: Boolean!
  isFork: Boolean!
  isLocked: Boolean!
  isPrivate: Boolean!
  isTracked: Boolean!
  description: String
  license: String!
  name: String!
  primaryLanguage: String!
  sshUrl: String!
  url: String!
}

type GitHubReviewRequest {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  pullRequest: GitHubPullRequest!
  requestedReviewer: GitHubUser!
}

type GitHubReviewThread {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  pullRequest: GitHubPullRequest!
  repository: GitHubRepository!
  resolvedBy: GitHubUser!
  isResolved: Boolean!
}

type GitHubTopic {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
}

type GitHubUser {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  createdAtExternal: Date!
  isBountyHunter: Boolean!
  isCampusExpert: Boolean!
  isDeveloperProgramMember: Boolean!
  isEmployee: Boolean!
  isHireable: Boolean!
  isSiteAdmin: Boolean!
  isViewer: Boolean!
  url: String!
  name: String!
  login: String!
  avatarUrl: String!
  bio: String!
  company: String!
  email: String!
}

type GitHubWebhookEvent {
  id: String!
  createdAt: Date!
  repository: Repository!
  eventType: String!
  action: String!
  sender: String!
}

input GitHubWebhookEventInput {
  repository: ID!
  eventType: String!
  sender: String
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  signup(data: SignupInput!): Auth!
  login(data: LoginInput!): Auth!
  create(gitHubWebhookEvent: GitHubWebhookEventInput!): GitHubWebhookEvent!
  createAppKey(data: CreateAppKeyInput!): AppKey!
  deleteAppKey(id: ID, key: String): AppKey!
  trackRepository(data: TrackRepositoryInput!): Repository!
}

type Query {
  post(postId: String!): Game!
  game(postId: String!): Game!
  appKey(id: ID, key: String): AppKey!
  userAppKeys(id: ID, email: String): [AppKey!]!
  validateAppKey(appKey: String!): AppKeyIsValid!
  me: User!
  repository(repositoryId: String!): Repository!
  repositoryList(username: String!): [GitHubRepository!]!
  helloWorld: String!
  hello(name: String!): String!
}

type Repository {
  id: String!
  idExternal: String!
  createdAt: Date!
  createdAtExternal: Date!
  updatedAt: Date!
  updatedAtExternal: Date!
  addedBy: User!
  name: String!
  description: String!
  homepageUrl: String!
  url: String!
  owner: String!
  isTracked: Boolean!
  appKey: AppKey!
  isFork: Boolean!
  isLocked: Boolean!
  isPrivate: Boolean!
  isDiabled: Boolean!
  sshUrl: String!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  password: String!
  name: String
  gitLogin: String
}

type Subscription {
  userMutated: User!
  repositoryMutated: Repository!
}

input TrackRepositoryInput {
  owner: String!
  repository: String!
}

type User {
  id: String!
  createdAt: Date!
  updatedAt: Date!
  email: String!
  name: String
  role: Role!
  appKeys: [AppKey!]!
  password: String!
  gitLogin: String!
}
